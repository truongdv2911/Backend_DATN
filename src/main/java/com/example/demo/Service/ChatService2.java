package com.example.demo.Service;

import com.example.demo.Entity.AnhSp;
import com.example.demo.Entity.SanPham;
import com.example.demo.Enum.ChatIntent;
import com.example.demo.Repository.Anh_sp_Repo;
import com.example.demo.Repository.San_pham_Repo;
import com.example.demo.Responses.AnhResponse;
import com.example.demo.Responses.ChatResponse;
import com.example.demo.Responses.SanPhamResponseDTO;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ChatService2 {
    private final San_pham_Repo productRepository;
    private final Anh_sp_Repo anhSpRepo;

    public ChatIntent detectIntent(String prompt) {
        String lower = prompt.toLowerCase();
        if (lower.contains("gi·∫£m gi√°") || lower.contains("t√¨m") || lower.contains("lego") || lower.contains("s·∫£n ph·∫©m"))
            return ChatIntent.TIM_KIEM;
        if (lower.contains("t∆∞ v·∫•n") || lower.contains("ph√π h·ª£p"))
            return ChatIntent.TU_VAN;
        if (lower.contains("ship") || lower.contains("giao") || lower.contains("bao l√¢u"))
            return ChatIntent.SHIP;
        if (lower.contains("ch√≠nh s√°ch") || lower.contains("b·∫£o h√†nh") || lower.contains("ƒë·ªïi tr·∫£"))
            return ChatIntent.GIOI_THIEU_CHINH_SACH;
        if (lower.contains("ch√†o") || lower.contains("xin ch√†o") || lower.contains("hi")|| lower.contains("hello"))
            return ChatIntent.CHAO_HOI;
        return ChatIntent.KHAC;
    }
    public ChatResponse handlePrompt(String prompt) {
        ChatIntent intent = detectIntent(prompt);

        switch (intent) {
            case TIM_KIEM:
                return handleSearch(prompt);

            case TU_VAN:
                return new ChatResponse(
                        "ADVICE",
                        "B·∫°n mu·ªën t∆∞ v·∫•n v·ªÅ ƒë·ªô tu·ªïi hay xu·∫•t x·ª© n√†o?",
                        null
                );

            case GIOI_THIEU_CHINH_SACH:
                return new ChatResponse(
                        "FAQ",
                        "üîÑ **Ch√≠nh s√°ch ƒë·ªïi tr·∫£:**\n‚Ä¢ ƒê·ªïi tr·∫£ trong 7 ng√†y\n‚Ä¢ S·∫£n ph·∫©m nguy√™n v·∫πn, ch∆∞a s·ª≠ d·ª•ng\n‚Ä¢ Mi·ªÖn ph√≠ n·∫øu l·ªói t·ª´ c·ª≠a h√†ng",
                        null
                );

            case CHAO_HOI:
                return new ChatResponse(
                        "GENERAL",
                        "üëã Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\nüîç T√¨m s·∫£n ph·∫©m LEGO\nüí° T∆∞ v·∫•n mua h√†ng\nüöö Th√¥ng tin giao h√†ng\nüõ°Ô∏è Ch√≠nh s√°ch b·∫£o h√†nh",
                        null
                );

            case SHIP:
                return new ChatResponse(
                        "SHIPPING",
                        "üöö **Giao h√†ng:**\n‚Ä¢ N·ªôi th√†nh: 1‚Äì2 ng√†y\n‚Ä¢ Ngo·∫°i th√†nh: 3‚Äì5 ng√†y\n‚Ä¢ Mi·ªÖn ph√≠ cho ƒë∆°n t·ª´ 500k",
                        null
                );

            default:
                return new ChatResponse(
                        "GENERAL",
                        "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu y√™u c·∫ßu. B·∫°n c√≥ th·ªÉ di·ªÖn ƒë·∫°t r√µ h∆°n kh√¥ng?",
                        null
                );
        }
    }

    private ChatResponse handleSearch(String prompt) {
        String lower = prompt.toLowerCase();
        List<SanPham> results;

        if (lower.contains("m·ªõi nh·∫•t") || lower.contains("m·ªõi th√™m") || lower.contains("s·∫£n ph·∫©m m·ªõi") || lower.contains("c·∫≠p nh·∫≠t m·ªõi")) {
            results = productRepository.findTop3ByTrangThaiOrderByNgayTaoDesc("ƒêang kinh doanh");
            return buildSearchResponse("S·∫£n ph·∫©m m·ªõi nh·∫•t v·ª´a c·∫≠p b·∫øn cho b·∫°n", results);
        }

        if (lower.contains("b√°n ch·∫°y") || lower.contains("hot")|| lower.contains("bestseller") || lower.contains("ph·ªï bi·∫øn")) {
            results = productRepository.findBestSeller();
            return buildSearchResponse("S·∫£n ph·∫©m ƒëang hot v√† b√°n ch·∫°y nh·∫•t hi·ªán nay", results);
        }

        if (lower.contains("ƒë·ªô tu·ªïi") || lower.contains("tu·ªïi")) {
            int age = 0;
            Matcher matcher = Pattern.compile("(\\d{1,2})").matcher(lower);
            if (matcher.find()) {
                age = Integer.parseInt(matcher.group(1));
            }
            results = productRepository.findByTrangThaiAndDoTuoiBetween("ƒêang kinh doanh",age, 99);
            return buildSearchResponse(
                    "S·∫£n ph·∫©m ph√π h·ª£p cho ƒë·ªô tu·ªïi " + age + "+", results
            );
        }

        String keyword = extractKeyword(lower);
        results = productRepository
                .searchActive(
                        "ƒêang kinh doanh",keyword);
        return buildSearchResponse("K·∫øt qu·∫£ t√¨m ki·∫øm cho t·ª´ kh√≥a: " + keyword, results);
    }

    private ChatResponse buildSearchResponse(String title, List<SanPham> list) {
        if (list.isEmpty()) {
            return new ChatResponse("SEARCH",
                    "R·∫•t ti·∫øc, hi·ªán t·∫°i ch√∫ng t√¥i kh√¥ng t√¨m th·∫•y " + title.toLowerCase() + ". " +
                            "B·∫°n c√≥ mu·ªën th·ª≠ t√¨m v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c c·∫ßn g·ª£i √Ω v·ªÅ c√°c s·∫£n ph·∫©m ph√π h·ª£p kh√¥ng? üòä",
                    Collections.emptyList());
        }
        List<SanPhamResponseDTO> dtos =
                convertToResponseDTOs(list);

        return new ChatResponse("SEARCH", "üîé " + title, dtos);
    }

    private String extractKeyword(String lower) {
        return lower.replace("t√¨m", "")
                .replace("lego", "")
                .replace("s·∫£n ph·∫©m", "")
                .replace("xu·∫•t x·ª©", "")
                .trim();
    }
    public List<SanPhamResponseDTO> convertToResponseDTOs(List<SanPham> sanPhams) {
        if (sanPhams.isEmpty()) {
            return new ArrayList<>();
        }

        // Batch load t·∫•t c·∫£ images cho t·∫•t c·∫£ s·∫£n ph·∫©m
        List<Integer> sanPhamIds = sanPhams.stream()
                .map(SanPham::getId)
                .collect(Collectors.toList());

        List<AnhSp> allImages = anhSpRepo.findBySanPhamIdIn(sanPhamIds);
        Map<Integer, List<AnhSp>> imagesBySanPhamId = allImages.stream()
                .collect(Collectors.groupingBy(anhSp -> anhSp.getSanPham().getId()));

        // Convert to DTOs
        return sanPhams.stream()
                .map(sanPham -> {
                    List<AnhSp> productImages = imagesBySanPhamId.getOrDefault(sanPham.getId(), new ArrayList<>());
                    List<AnhResponse> anhUrls = productImages.stream()
                            .map(anh -> {
                                AnhResponse response = new AnhResponse();
                                response.setId(anh.getId());
                                response.setUrl(anh.getUrl());
                                response.setAnhChinh(anh.getAnhChinh());
                                return response;
                            })
                            .toList();

                    SanPhamResponseDTO dto = new SanPhamResponseDTO();
                    dto.setId(sanPham.getId());
                    dto.setTenSanPham(sanPham.getTenSanPham());
                    dto.setMaSanPham(sanPham.getMaSanPham());
                    dto.setDoTuoi(sanPham.getDoTuoi());
                    dto.setMoTa(sanPham.getMoTa());
                    dto.setGia(sanPham.getGia());
                    dto.setSoLuongManhGhep(sanPham.getSoLuongManhGhep());
                    dto.setSoLuongTon(sanPham.getSoLuongTon());
                    dto.setSoLuongVote(sanPham.getSoLuongVote());
                    dto.setDanhGiaTrungBinh(sanPham.getDanhGiaTrungBinh());
                    dto.setDanhMucId(sanPham.getDanhMuc() != null ? sanPham.getDanhMuc().getId() : null);
                    dto.setBoSuuTapId(sanPham.getBoSuuTap() != null ? sanPham.getBoSuuTap().getId() : null);
                    dto.setXuatXuId(sanPham.getXuatXu() != null ? sanPham.getXuatXu().getId() : null);
                    dto.setTrangThai(sanPham.getTrangThai());
                    dto.setThuongHieuId(sanPham.getThuongHieu() != null ? sanPham.getThuongHieu().getId() : null);
                    dto.setNoiBat(sanPham.getNoiBat() != null ? sanPham.getNoiBat() : null);
                    dto.setAnhUrls(anhUrls);
                    return dto;
                })
                .collect(Collectors.toList());
    }
}
