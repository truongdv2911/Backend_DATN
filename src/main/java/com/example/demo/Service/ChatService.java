package com.example.demo.Service;

import com.example.demo.DTOs.IntentClassificationDTO;
import com.example.demo.DTOs.SearchRequestDTO;
import com.example.demo.Entity.AnhSp;
import com.example.demo.Entity.ChatMemory;
import com.example.demo.Entity.SanPham;
import com.example.demo.Repository.Anh_sp_Repo;
import com.example.demo.Repository.San_pham_Repo;
import com.example.demo.Responses.AnhResponse;
import com.example.demo.Responses.ChatResponse;
import com.example.demo.Responses.SanPhamResponseDTO;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.RequiredArgsConstructor;
import java.util.stream.Collectors;
import java.util.Map;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.ollama.OllamaChatClient;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ChatService {
    private final OllamaChatClient chatClient;
    private final San_pham_Repo sanPhamRepo;
    private final ObjectMapper objectMapper;
    private final Anh_sp_Repo anhSpRepo;

    // Chat memory storage - s·ª≠ d·ª•ng ConcurrentHashMap ƒë·ªÉ thread-safe
    private final Map<String, List<ChatMemory>> userChatMemory = new ConcurrentHashMap<>();
    private static final int MAX_MEMORY_SIZE = 10; // Gi·ªõi h·∫°n 10 tin nh·∫Øn g·∫ßn nh·∫•t
    
    // Thread pool cho async operations
    private final Executor asyncExecutor = Executors.newFixedThreadPool(4);
    
    // Cache cho c√°c k·∫øt qu·∫£ t√¨m ki·∫øm ph·ªï bi·∫øn
    private final Map<String, List<SanPham>> searchCache = new ConcurrentHashMap<>();
    private final Map<String, IntentClassificationDTO> intentCache = new ConcurrentHashMap<>();
    private final Map<String, List<SanPham>> bestSellingCache = new ConcurrentHashMap<>();
    
    // Cache TTL (Time To Live) - 5 ph√∫t
    private final Map<String, Long> cacheTimestamps = new ConcurrentHashMap<>();
    private static final long CACHE_TTL = 5 * 60 * 1000; // 5 ph√∫t

    // FAQ knowledge base - c·∫£i thi·ªán v·ªõi th√¥ng tin chi ti·∫øt h∆°n
    private final Map<String, String> faqDatabase = Map.of(
            "SHIPPING", "üöö **Th√¥ng tin giao h√†ng:**\n‚Ä¢ N·ªôi th√†nh H√† N·ªôi, TP.HCM: 1-2 ng√†y l√†m vi·ªác\n‚Ä¢ Ngo·∫°i th√†nh: 3-5 ng√†y l√†m vi·ªác\n‚Ä¢ Mi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng t·ª´ 500,000ƒë\n‚Ä¢ Ph√≠ ship: 30,000ƒë cho ƒë∆°n d∆∞·ªõi 500,000ƒë",
            "WARRANTY", "üõ°Ô∏è **Ch√≠nh s√°ch b·∫£o h√†nh:**\n‚Ä¢ B·∫£o h√†nh 12 th√°ng l·ªói s·∫£n xu·∫•t\n‚Ä¢ ƒê·ªïi tr·∫£ mi·ªÖn ph√≠ trong 7 ng√†y ƒë·∫ßu\n‚Ä¢ S·∫£n ph·∫©m ph·∫£i c√≤n nguy√™n v·∫πn, ƒë·∫ßy ƒë·ªß ph·ª• ki·ªán\n‚Ä¢ H·ªó tr·ª£ b·∫£o h√†nh t·∫°i t·∫•t c·∫£ chi nh√°nh",
            "PAYMENT", "üí≥ **Ph∆∞∆°ng th·ª©c thanh to√°n:**\n‚Ä¢ Thanh to√°n khi nh·∫≠n h√†ng (COD)\n‚Ä¢ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n‚Ä¢ Th·∫ª t√≠n d·ª•ng/ghi n·ª£\n‚Ä¢ V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay, VNPay)\n‚Ä¢ Tr·∫£ g√≥p 0% l√£i su·∫•t (3-12 th√°ng)",
            "RETURN", "üîÑ **Ch√≠nh s√°ch ƒë·ªïi tr·∫£:**\n‚Ä¢ ƒê·ªïi tr·∫£ kh√¥ng l√Ω do trong 7 ng√†y\n‚Ä¢ S·∫£n ph·∫©m ph·∫£i nguy√™n v·∫πn, ch∆∞a s·ª≠ d·ª•ng\n‚Ä¢ C√≥ h√≥a ƒë∆°n mua h√†ng\n‚Ä¢ Mi·ªÖn ph√≠ ƒë·ªïi tr·∫£ n·∫øu l·ªói t·ª´ c·ª≠a h√†ng",
            "CONTACT", "üìû **Th√¥ng tin li√™n h·ªá:**\n‚Ä¢ Hotline: 1900-xxxx (8:00-22:00)\n‚Ä¢ Email: support@legoshop.vn\n‚Ä¢ Fanpage: facebook.com/legoshopvn\n‚Ä¢ Zalo: zalo.me/legoshop\n‚Ä¢ Chi nh√°nh: 123 ABC Street, H√† N·ªôi"
    );

    // Product categories for better advice
    private final Map<String, List<String>> productCategories = Map.of(
            "TECHNIC", List.of("LEGO TECHNIC", "MECHANICAL", "ENGINEERING"),
            "CITY", List.of("LEGO CITY", "POLICE", "FIRE", "CONSTRUCTION"),
            "CREATOR", List.of("LEGO CREATOR", "EXPERT", "ADVANCED"),
            "STAR_WARS", List.of("LEGO STAR WARS", "STAR WARS"),
            "FRIENDS", List.of("LEGO FRIENDS", "FRIENDS"),
            "DUPLO", List.of("LEGO DUPLO", "DUPLO"),
            "JUNIORS", List.of("LEGO JUNIORS", "JUNIORS")
    );

    /**
     * Main method x·ª≠ l√Ω input t·ª´ user v·ªõi memory context - OPTIMIZED
     */
    public ChatResponse handleUserInput(String userInput, String sessionId) {
        try {
            // L·∫•y chat history ƒë·ªÉ c√≥ context
            List<ChatMemory> chatHistory = getChatHistory(sessionId);

            // Ph√¢n lo·∫°i intent v·ªõi caching
            IntentClassificationDTO intent = classifyIntentWithCaching(userInput, chatHistory);

            // X·ª≠ l√Ω theo intent
            ChatResponse response = processIntentRequest(intent, userInput, chatHistory);

            // L∆∞u v√†o memory async ƒë·ªÉ kh√¥ng block response
            CompletableFuture.runAsync(() -> 
                saveChatMemory(sessionId, userInput, response.getMessage(), intent.getIntent()), 
                asyncExecutor);

            return response;

        } catch (Exception e) {
            ChatResponse errorResponse = new ChatResponse("ERROR",
                    "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.", null);
            CompletableFuture.runAsync(() -> 
                saveChatMemory(sessionId, userInput, errorResponse.getMessage(), "ERROR"), 
                asyncExecutor);
            return errorResponse;
        }
    }

    /**
     * Ph√¢n lo·∫°i intent v·ªõi caching - OPTIMIZED
     */
    private IntentClassificationDTO classifyIntentWithCaching(String userInput, List<ChatMemory> chatHistory) {
        // T·∫°o cache key t·ª´ user input (normalize ƒë·ªÉ cache hi·ªáu qu·∫£ h∆°n)
        String cacheKey = normalizeInputForCache(userInput);
        
        // Ki·ªÉm tra cache tr∆∞·ªõc
        if (isCacheValid(cacheKey)) {
            IntentClassificationDTO cached = intentCache.get(cacheKey);
            if (cached != null) {
                System.out.println("DEBUG: Using cached intent: " + cached.getIntent());
                return cached;
            }
        }
        
        // N·∫øu kh√¥ng c√≥ cache, th·ª±c hi·ªán ph√¢n lo·∫°i
        IntentClassificationDTO result = classifyIntentWithContext(userInput, chatHistory);
        
        // L∆∞u v√†o cache
        intentCache.put(cacheKey, result);
        cacheTimestamps.put(cacheKey, System.currentTimeMillis());
        
        return result;
    }
    /**
     * Ph√¢n lo·∫°i intent v·ªõi context t·ª´ chat history - C·∫¢I THI·ªÜN
     */
    private IntentClassificationDTO classifyIntentWithContext(String userInput, List<ChatMemory> chatHistory) {
        // S·ª≠ d·ª•ng fallback logic tr∆∞·ªõc khi g·ªçi AI ƒë·ªÉ tƒÉng t·ªëc
        String fallbackIntent = determineIntentFallback(userInput);
        
        // ∆Øu ti√™n fallback cho c√°c c√¢u t√¨m ki·∫øm r√µ r√†ng
        if (isClearSearchIntent(userInput)) {
            System.out.println("DEBUG: Using fallback for clear search intent: " + fallbackIntent);
            IntentClassificationDTO result = new IntentClassificationDTO();
            result.setIntent(fallbackIntent);
            result.setConfidence("HIGH");
            result.setExtractedInfo(userInput);
            return result;
        }
        
        // Ch·ªâ g·ªçi AI cho c√°c tr∆∞·ªùng h·ª£p ph·ª©c t·∫°p v√† kh√¥ng r√µ r√†ng
        if (isComplexIntent(userInput)) {
        String contextInfo = buildContextFromHistory(chatHistory);

        String intentPrompt = String.format("""
            B·∫°n l√† AI chuy√™n ph√¢n t√≠ch √Ω ƒë·ªãnh kh√°ch h√†ng cho c·ª≠a h√†ng LEGO.
            
            **NG·ªÆ C·∫¢NH CU·ªòC TR√í CHUY·ªÜN:**
            %s
            
            **PH√ÇN T√çCH C√ÇU:** "%s"
            
            **QUY T·∫ÆC PH√ÇN LO·∫†I (CH·ªåN 1 INTENT DUY NH·∫§T - THEO TH·ª® T·ª∞ ∆ØU TI√äN):**
                1. SHIPPING: Giao h√†ng, v·∫≠n chuy·ªÉn, th·ªùi gian ship, ph√≠ ship, "ship ƒë·∫øn", "bao l√¢u", "mi·ªÖn ph√≠", "ho√†n h√†ng", "ƒë·ªïi tr·∫£", "tr·∫£ h√†ng", "ho√†n ti·ªÅn"
            2. ADVICE: T∆∞ v·∫•n, g·ª£i √Ω, h·ªèi √Ω ki·∫øn v·ªÅ s·∫£n ph·∫©m (∆∞u ti√™n cho "t∆∞ v·∫•n", "b√°n ch·∫°y", "ph·ªï bi·∫øn")
            3. SEARCH: T√¨m ki·∫øm s·∫£n ph·∫©m c·ª• th·ªÉ (t√™n, lo·∫°i, gi√°, th∆∞∆°ng hi·ªáu, ƒë·ªô tu·ªïi, xu·∫•t x·ª©)
            4. FAQ: B·∫£o h√†nh, thanh to√°n, ƒë·ªïi tr·∫£, li√™n h·ªá
            5. FOLLOW_UP: C√¢u h·ªèi ti·∫øp theo v·ªÅ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc
            6. GENERAL: Ch√†o h·ªèi, c·∫£m ∆°n, c√¢u h·ªèi chung
            
                **L∆ØU √ù QUAN TR·ªåNG:** 
                - ∆Øu ti√™n SHIPPING n·∫øu c√≥ t·ª´: "ship", "giao", "bao l√¢u", "th·ªùi gian", "ƒë·∫øn", "ha noi", "tp.hcm", "ho√†n h√†ng", "ƒë·ªïi tr·∫£", "tr·∫£ h√†ng", "ho√†n ti·ªÅn"
                - N·∫øu c√¢u ch·ª©a "t√¨m", "cho", "tu·ªïi", "xu·∫•t x·ª©" ‚Üí SEARCH (nh∆∞ng kh√¥ng c√≥ t·ª´ shipping/return)
                - Ch·ªâ tr·∫£ v·ªÅ 1 intent duy nh·∫•t, kh√¥ng d√πng d·∫•u |
            
            **TR·∫¢ V·ªÄ JSON:**
            {
              "intent": "SEARCH|ADVICE|SHIPPING|FAQ|FOLLOW_UP|GENERAL",
              "confidence": "HIGH|MEDIUM|LOW",
              "extractedInfo": "th√¥ng tin quan tr·ªçng t·ª´ c√¢u"
            }
            """, contextInfo, userInput);

        return executeIntentClassification(intentPrompt);
        } else {
            // S·ª≠ d·ª•ng fallback cho c√°c tr∆∞·ªùng h·ª£p ƒë∆°n gi·∫£n
            IntentClassificationDTO result = new IntentClassificationDTO();
            result.setIntent(fallbackIntent);
            result.setConfidence("HIGH");
            result.setExtractedInfo(userInput);
            return result;
        }
    }

    /**
     * X·ª≠ l√Ω request theo intent - C·∫¢I THI·ªÜN
     */
    private ChatResponse processIntentRequest(IntentClassificationDTO intent, String userInput, List<ChatMemory> chatHistory) {
        System.out.println("DEBUG: Processing intent: " + intent.getIntent() + " for input: " + userInput);
        
        return switch (intent.getIntent().toUpperCase()) {
            case "SEARCH" -> {
                System.out.println("DEBUG: Routing to SEARCH handler");
                yield handleProductSearch(userInput, chatHistory);
            }
            case "ADVICE" -> {
                System.out.println("DEBUG: Routing to ADVICE handler");
                yield handleAdviceRequest(userInput, chatHistory);
            }
            case "SHIPPING" -> {
                System.out.println("DEBUG: Routing to SHIPPING handler");
                yield handleShippingQuery(userInput);
            }
            case "FAQ" -> {
                System.out.println("DEBUG: Routing to FAQ handler");
                yield handleFAQQuery(userInput, intent.getExtractedInfo());
            }
            case "FOLLOW_UP" -> {
                System.out.println("DEBUG: Routing to FOLLOW_UP handler");
                yield handleFollowUpQuestion(userInput, chatHistory);
            }
            case "GENERAL" -> {
                System.out.println("DEBUG: Routing to GENERAL handler");
                yield handleGeneralChat(userInput, chatHistory);
            }
            default -> {
                System.out.println("DEBUG: Routing to default GENERAL handler");
                yield handleGeneralChat(userInput, chatHistory);
            }
        };
    }

    /**
     * X·ª≠ l√Ω t√¨m ki·∫øm s·∫£n ph·∫©m - OPTIMIZED v·ªõi caching
     */
    private ChatResponse handleProductSearch(String userInput, List<ChatMemory> chatHistory) {
        try {
            System.out.println("DEBUG: Starting product search for: " + userInput);
            
            // Ki·ªÉm tra cache tr∆∞·ªõc (c√≥ th·ªÉ disable cache ƒë·ªÉ debug)
            String cacheKey = "search_" + normalizeInputForCache(userInput);
            List<SanPham> products = getCachedProducts(cacheKey);
            
            // Debug: Force fresh search if needed
            boolean forceFreshSearch = userInput.toLowerCase().contains("debug") || 
                                     userInput.toLowerCase().contains("fresh");
            
            if (products == null || forceFreshSearch) {
                if (forceFreshSearch) {
                    System.out.println("DEBUG: Force fresh search requested");
                }
                System.out.println("DEBUG: No cached products, searching...");
                
            // T√¨m ki·∫øm v·ªõi context
                products = searchProductsWithContext(userInput, chatHistory);
                System.out.println("DEBUG: Context search found " + products.size() + " products");

            if (products.isEmpty()) {
                    System.out.println("DEBUG: Context search empty, trying fallback...");
                // Fallback: t√¨m ki·∫øm r·ªông h∆°n
                products = searchProductsFallback(userInput);
                    System.out.println("DEBUG: Fallback search found " + products.size() + " products");
                
                    // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m ki·∫øm ch·ªâ theo xu·∫•t x·ª©
                if (products.isEmpty()) {
                        System.out.println("DEBUG: Fallback empty, trying origin-only search...");
                        SearchRequestDTO originRequest = new SearchRequestDTO();
                        originRequest.setXuatXu("Trung Qu·ªëc");
                        products = searchWithRepository(originRequest);
                        System.out.println("DEBUG: Origin-only search found " + products.size() + " products");
                    }
                    
                    // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m ki·∫øm ch·ªâ theo ƒë·ªô tu·ªïi
                    if (products.isEmpty()) {
                        System.out.println("DEBUG: Origin search empty, trying age-only search...");
                        SearchRequestDTO ageRequest = new SearchRequestDTO();
                        ageRequest.setDoTuoi(7);
                        products = searchWithRepository(ageRequest);
                        System.out.println("DEBUG: Age-only search found " + products.size() + " products");
                    }
                    
                    if (products.isEmpty()) {
                        System.out.println("DEBUG: No products found, returning empty result");
                    return new ChatResponse("SEARCH",
                            "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. " +
                            "B·∫°n c√≥ th·ªÉ:\n‚Ä¢ Th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c\n‚Ä¢ Cho t√¥i bi·∫øt th√™m th√¥ng tin (ƒë·ªô tu·ªïi, ng√¢n s√°ch, s·ªü th√≠ch)\n‚Ä¢ Li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp", null);
                }
            }

                // Filter products before caching - ch·ªâ filter theo tr·∫°ng th√°i
                List<SanPham> activeProducts = products.stream()
                        .filter(p -> p.getTrangThai() != null && 
                                   !p.getTrangThai().equals("Ng·ª´ng kinh doanh") &&
                                   !p.getTrangThai().equals("H·∫øt h√†ng"))
                    .collect(Collectors.toList());
                
                System.out.println("DEBUG: Filtered products: " + products.size() + 
                                 " -> " + activeProducts.size() + " active products");
                
                // Debug: Count products with null origin
                long nullOriginCount = products.stream()
                        .filter(p -> p.getXuatXu() == null)
                        .count();
                if (nullOriginCount > 0) {
                    System.out.println("DEBUG: Found " + nullOriginCount + " products with null origin (filtered out)");
                }
                
                // Cache k·∫øt qu·∫£ (ch·ªâ cache s·∫£n ph·∫©m active)
                cacheProducts(cacheKey, activeProducts);
                products = activeProducts;
            } else {
                System.out.println("DEBUG: Using cached products: " + products.size());
            }

            // Convert to DTO - OPTIMIZED batch conversion
            List<SanPhamResponseDTO> productDTOs = convertToResponseDTOs(products);
            System.out.println("DEBUG: Converted to " + productDTOs.size() + " DTOs");

            String message = generateSearchResponse(userInput, products, chatHistory);
            return new ChatResponse("SEARCH", message, productDTOs);

        } catch (Exception e) {
            System.err.println("DEBUG: Error in handleProductSearch: " + e.getMessage());
            e.printStackTrace();
            return new ChatResponse("ERROR", "L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.", null);
        }
    }

    /**
     * X·ª≠ l√Ω t∆∞ v·∫•n v·ªõi context - C·∫¢I THI·ªÜN M·∫†NH M·∫º
     */
    private ChatResponse handleAdviceRequest(String userInput, List<ChatMemory> chatHistory) {
        try {
            System.out.println("DEBUG: Entering handleAdviceRequest with: " + userInput);
            String lowerInput = userInput.toLowerCase();
            System.out.println("DEBUG: Lower input: " + lowerInput);
            
            // Ki·ªÉm tra n·∫øu y√™u c·∫ßu v·ªÅ s·∫£n ph·∫©m b√°n ch·∫°y
            if (lowerInput.contains("b√°n ch·∫°y") || lowerInput.contains("ph·ªï bi·∫øn") || 
                lowerInput.contains("n·ªïi ti·∫øng") || lowerInput.contains("hot") ||
                lowerInput.contains("best") || lowerInput.contains("top") ||
                lowerInput.contains("nh·∫•t")) {
                
                try {
                    List<SanPham> bestSellingProducts = findBestSellingProducts();
                    System.out.println("Found " + bestSellingProducts.size() + " best selling products");
                    
                    if (bestSellingProducts.isEmpty()) {
                        // Fallback: l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
                        bestSellingProducts = sanPhamRepo.findAll().stream()
                                .limit(3)
                                .collect(Collectors.toList());
                        System.out.println("Fallback: Found " + bestSellingProducts.size() + " products");
                    }
                    
                    // Convert to DTO - OPTIMIZED batch conversion
                    List<SanPhamResponseDTO> bestSellingDTOs = convertToResponseDTOs(bestSellingProducts);
                    
                    String adviceMessage = generateBestSellingAdvice(userInput, bestSellingProducts);
                    return new ChatResponse("ADVICE", adviceMessage, bestSellingDTOs);
                    
                } catch (Exception e) {
                    System.err.println("Error finding best selling products: " + e.getMessage());
                    // Fallback: l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
                    List<SanPham> allProducts = sanPhamRepo.findAll().stream()
                            .limit(3)
                            .collect(Collectors.toList());
                    
                    // Convert to DTO - OPTIMIZED batch conversion
                    List<SanPhamResponseDTO> allProductDTOs = convertToResponseDTOs(allProducts);
                    
                    String fallbackMessage = "üî• **TOP S·∫¢N PH·∫®M LEGO PH·ªî BI·∫æN** üî•\n\n" +
                            "D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n, ƒë√¢y l√† nh·ªØng s·∫£n ph·∫©m LEGO ƒë∆∞·ª£c nhi·ªÅu kh√°ch h√†ng y√™u th√≠ch:\n\n" +
                            formatProductsForAdvice(allProducts) + "\n\n" +
                            "üí° **L·ªùi khuy√™n:** Nh·ªØng s·∫£n ph·∫©m n√†y ƒë·ªÅu c√≥ ch·∫•t l∆∞·ª£ng cao v√† ph√π h·ª£p v·ªõi nhi·ªÅu ƒë·ªô tu·ªïi. " +
                            "B·∫°n c√≥ th·ªÉ ch·ªçn theo s·ªü th√≠ch ho·∫∑c li√™n h·ªá t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n!";
                    
                    return new ChatResponse("ADVICE", fallbackMessage, allProductDTOs);
                }
            }
            
            // Ph√¢n t√≠ch nhu c·∫ßu ng∆∞·ªùi d√πng cho c√°c tr∆∞·ªùng h·ª£p kh√°c
            UserNeeds userNeeds = analyzeUserNeeds(userInput, chatHistory);
            
            // T√¨m s·∫£n ph·∫©m ph√π h·ª£p
            List<SanPham> recommendedProducts = findProductsByNeeds(userNeeds);
            
            // Convert to DTO - OPTIMIZED batch conversion
            List<SanPhamResponseDTO> recommendedDTOs = convertToResponseDTOs(recommendedProducts);
            
            // T·∫°o l·ªùi t∆∞ v·∫•n th√¥ng minh
            String adviceMessage = generateIntelligentAdvice(userInput, recommendedProducts, userNeeds, chatHistory);
            
            return new ChatResponse("ADVICE", adviceMessage, recommendedDTOs);

        } catch (Exception e) {
            System.err.println("Error in handleAdviceRequest: " + e.getMessage());
            e.printStackTrace();
            return new ChatResponse("ADVICE",
                    "ƒê·ªÉ t∆∞ v·∫•n t·ªët nh·∫•t, b·∫°n vui l√≤ng cho bi·∫øt:\n" +
                    "‚Ä¢ ƒê·ªô tu·ªïi ng∆∞·ªùi ch∆°i\n" +
                    "‚Ä¢ S·ªü th√≠ch (xe h∆°i, robot, th√†nh ph·ªë, v.v.)\n" +
                    "‚Ä¢ Ng√¢n s√°ch d·ª± ki·∫øn\n" +
                    "‚Ä¢ Kinh nghi·ªám ch∆°i LEGO\n\n" +
                    "Ho·∫∑c li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp!", null);
        }
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi follow-up - C·∫¢I THI·ªÜN
     */
    private ChatResponse handleFollowUpQuestion(String userInput, List<ChatMemory> chatHistory) {
        try {
            // L·∫•y context t·ª´ c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
            String contextInfo = buildContextFromHistory(chatHistory);
            
            // Ph√¢n t√≠ch follow-up question
            FollowUpAnalysis analysis = analyzeFollowUpQuestion(userInput, chatHistory);

            String followUpPrompt = String.format("""
                B·∫°n l√† chuy√™n gia t∆∞ v·∫•n LEGO th√¢n thi·ªán v√† chuy√™n nghi·ªáp.
                
                **NG·ªÆ C·∫¢NH CU·ªòC TR√í CHUY·ªÜN:**
                %s
                
                **C√ÇU H·ªéI FOLLOW-UP:** "%s"
                
                **PH√ÇN T√çCH:** %s
                
                H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† h·ªØu √≠ch.
                N·∫øu c·∫ßn t√¨m ki·∫øm s·∫£n ph·∫©m, h√£y ƒë·ªÅ xu·∫•t c·ª• th·ªÉ.
                Tr·∫£ l·ªùi ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.
                """, contextInfo, userInput, analysis.getAnalysis());

            Prompt prompt = new Prompt(followUpPrompt);
            String response = chatClient.call(prompt).getResult().getOutput().getContent();

            // Convert products to DTO - OPTIMIZED batch conversion
            List<SanPhamResponseDTO> productDTOs = convertToResponseDTOs(analysis.getProducts());

            return new ChatResponse("FOLLOW_UP", response.trim(), productDTOs);

        } catch (Exception e) {
            return new ChatResponse("FOLLOW_UP",
                    "T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi th√™m v·ªÅ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc. " +
                    "B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë·ªÉ t√¥i h·ªó tr·ª£ t·ªët h∆°n kh√¥ng?", null);
        }
    }

    /**
     * X·ª≠ l√Ω shipping query - C·∫¢I THI·ªÜN (bao g·ªìm ho√†n h√†ng)
     */
    private ChatResponse handleShippingQuery(String userInput) {
        String lowerInput = userInput.toLowerCase();
        String response = "";

        // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ho√†n h√†ng/ƒë·ªïi tr·∫£
        if (lowerInput.contains("ho√†n h√†ng") || lowerInput.contains("ƒë·ªïi tr·∫£") || lowerInput.contains("tr·∫£ h√†ng") || lowerInput.contains("ho√†n ti·ªÅn")) {
            response = "üîÑ **Ch√≠nh s√°ch ho√†n h√†ng & ƒë·ªïi tr·∫£:**\n\n";
            response += "üìã **ƒêi·ªÅu ki·ªán ho√†n h√†ng:**\n";
            response += "‚Ä¢ ƒê·ªïi tr·∫£ kh√¥ng l√Ω do trong 7 ng√†y ƒë·∫ßu\n";
            response += "‚Ä¢ S·∫£n ph·∫©m ph·∫£i nguy√™n v·∫πn, ch∆∞a s·ª≠ d·ª•ng\n";
            response += "‚Ä¢ C√≥ h√≥a ƒë∆°n mua h√†ng h·ª£p l·ªá\n";
            response += "‚Ä¢ ƒê·∫ßy ƒë·ªß ph·ª• ki·ªán, bao b√¨ g·ªëc\n\n";
            
            response += "‚è∞ **Th·ªùi gian x·ª≠ l√Ω:**\n";
            response += "‚Ä¢ X√°c nh·∫≠n y√™u c·∫ßu: 1-2 ng√†y l√†m vi·ªác\n";
            response += "‚Ä¢ Ho√†n ti·ªÅn: 3-7 ng√†y l√†m vi·ªác\n";
            response += "‚Ä¢ ƒê·ªïi s·∫£n ph·∫©m m·ªõi: 5-10 ng√†y l√†m vi·ªác\n\n";
            
            response += "üí∞ **Ph√≠ ho√†n h√†ng:**\n";
            response += "‚Ä¢ Mi·ªÖn ph√≠: L·ªói t·ª´ c·ª≠a h√†ng\n";
            response += "‚Ä¢ Ph√≠ ship: 30,000ƒë (kh√°ch h√†ng ƒë·ªïi √Ω)\n";
            response += "‚Ä¢ Ho√†n ti·ªÅn: Mi·ªÖn ph√≠\n\n";
            
            response += "üìû **Li√™n h·ªá ho√†n h√†ng:**\n";
            response += "‚Ä¢ Hotline: 1900-xxxx\n";
            response += "‚Ä¢ Email: return@legoshop.vn\n";
            response += "‚Ä¢ Zalo: zalo.me/legoshop";
            
            return new ChatResponse("SHIPPING", response, null);
        }

        // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ giao h√†ng th√¥ng th∆∞·ªùng
        String shippingInfo = faqDatabase.get("SHIPPING");

        // X·ª≠ l√Ω c√¢u h·ªèi c·ª• th·ªÉ v·ªÅ th·ªùi gian giao h√†ng
        if (lowerInput.contains("th·ªùi gian") || lowerInput.contains("bao l√¢u")) {
            if (lowerInput.contains("ha noi") || lowerInput.contains("h√† n·ªôi")) {
                shippingInfo += "\n\nüèôÔ∏è **Giao h√†ng t·∫°i H√† N·ªôi:**\n‚Ä¢ N·ªôi th√†nh: 1-2 ng√†y l√†m vi·ªác\n‚Ä¢ Ngo·∫°i th√†nh: 3-5 ng√†y l√†m vi·ªác\n‚Ä¢ Giao trong ng√†y: ƒê·∫∑t tr∆∞·ªõc 14:00 (+30,000ƒë)";
            } else if (lowerInput.contains("tp.hcm") || lowerInput.contains("s√†i g√≤n") || lowerInput.contains("h·ªì ch√≠ minh")) {
                shippingInfo += "\n\nüèôÔ∏è **Giao h√†ng t·∫°i TP.HCM:**\n‚Ä¢ N·ªôi th√†nh: 1-2 ng√†y l√†m vi·ªác\n‚Ä¢ Ngo·∫°i th√†nh: 3-5 ng√†y l√†m vi·ªác\n‚Ä¢ Giao trong ng√†y: ƒê·∫∑t tr∆∞·ªõc 14:00 (+30,000ƒë)";
            } else {
                shippingInfo += "\n\n‚è∞ **Th·ªùi gian giao h√†ng chi ti·∫øt:**\n‚Ä¢ Giao trong ng√†y: ƒê·∫∑t tr∆∞·ªõc 14:00 (+30,000ƒë)\n‚Ä¢ Giao nhanh: +50,000ƒë (giao trong 2-4 gi·ªù)\n‚Ä¢ Giao ti√™u chu·∫©n: Mi·ªÖn ph√≠ (1-5 ng√†y t√πy khu v·ª±c)";
            }
        }
        
        if (lowerInput.contains("mi·ªÖn ph√≠") || lowerInput.contains("free")) {
            shippingInfo += "\n\nüí° **Mi·ªÖn ph√≠ ship:**\n‚Ä¢ ƒê∆°n h√†ng t·ª´ 500,000ƒë: Mi·ªÖn ph√≠ ho√†n to√†n\n‚Ä¢ ƒê∆°n d∆∞·ªõi 500,000ƒë: Ph√≠ ship 30,000ƒë";
        }
        
        if (lowerInput.contains("ph√≠") || lowerInput.contains("cost")) {
            shippingInfo += "\n\nüí∞ **Ph√≠ giao h√†ng:**\n‚Ä¢ Mi·ªÖn ph√≠: ƒê∆°n t·ª´ 500,000ƒë\n‚Ä¢ Ph√≠ chu·∫©n: 30,000ƒë (ƒë∆°n d∆∞·ªõi 500,000ƒë)\n‚Ä¢ Giao nhanh: +50,000ƒë\n‚Ä¢ Giao trong ng√†y: +30,000ƒë";
        }

        return new ChatResponse("SHIPPING", shippingInfo, null);
    }

    /**
     * X·ª≠ l√Ω FAQ query - C·∫¢I THI·ªÜN
     */
    private ChatResponse handleFAQQuery(String userInput, String extractedInfo) {
        String lowerInput = userInput.toLowerCase();

        String response = determineFAQResponse(lowerInput);
        return new ChatResponse("FAQ", response, null);
    }

    /**
     * X·ª≠ l√Ω chat chung v·ªõi context - C·∫¢I THI·ªÜN
     */
    private ChatResponse handleGeneralChat(String userInput, List<ChatMemory> chatHistory) {
        String contextInfo = buildContextFromHistory(chatHistory);

        String generalPrompt = String.format("""
            B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n th√¢n thi·ªán v√† chuy√™n nghi·ªáp c·ªßa c·ª≠a h√†ng LEGO.
            
            **NG·ªÆ C·∫¢NH:** %s
            
            **C√ÇU KH√ÅCH H√ÄNG:** "%s"
            
            H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† h·ªØu √≠ch.
            N·∫øu c√≥ th·ªÉ, h√£y h∆∞·ªõng d·∫´n kh√°ch h√†ng ƒë·∫øn c√°c d·ªãch v·ª• ph√π h·ª£p.
            Tr·∫£ l·ªùi ng·∫Øn g·ªçn (50-100 t·ª´) nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.
            S·ª≠ d·ª•ng emoji ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán.
            """, contextInfo, userInput);

        try {
            Prompt prompt = new Prompt(generalPrompt);
            String response = chatClient.call(prompt).getResult().getOutput().getContent();
            return new ChatResponse("GENERAL", response.trim(), null);
        } catch (Exception e) {
            return new ChatResponse("GENERAL",
                    "üëã Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n" +
                    "üîç T√¨m ki·∫øm s·∫£n ph·∫©m LEGO\n" +
                    "üí° T∆∞ v·∫•n mua h√†ng\n" +
                    "üöö Th√¥ng tin giao h√†ng\n" +
                    "üõ°Ô∏è Ch√≠nh s√°ch b·∫£o h√†nh\n\n" +
                    "B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ ·∫°?", null);
        }
    }

    /**
     * Memory Management Methods
     */
    private List<ChatMemory> getChatHistory(String sessionId) {
        return userChatMemory.getOrDefault(sessionId, new ArrayList<>());
    }

    private void saveChatMemory(String sessionId, String userInput, String botResponse, String intent) {
        List<ChatMemory> history = userChatMemory.computeIfAbsent(sessionId, k -> new ArrayList<>());

        history.add(new ChatMemory(userInput, botResponse, intent));

        // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc memory
        if (history.size() > MAX_MEMORY_SIZE) {
            history.remove(0); // X√≥a tin nh·∫Øn c≈© nh·∫•t
        }
    }

    private String buildContextFromHistory(List<ChatMemory> chatHistory) {
        if (chatHistory.isEmpty()) {
            return "ƒê√¢y l√† ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán.";
        }

        return chatHistory.stream()
                .limit(5) // Ch·ªâ l·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t
                .map(memory -> String.format("User: %s | Bot: %s",
                        memory.getUserInput(),
                        memory.getBotResponse().substring(0, Math.min(100, memory.getBotResponse().length()))))
                .collect(Collectors.joining("\n"));
    }

    public void clearChatMemory(String sessionId) {
        userChatMemory.remove(sessionId);
    }

    public int getChatMemorySize(String sessionId) {
        return userChatMemory.getOrDefault(sessionId, new ArrayList<>()).size();
    }

    /**
     * Helper Methods - C·∫¢I THI·ªÜN
     */
    private IntentClassificationDTO executeIntentClassification(String intentPrompt) {
        try {
            Prompt prompt = new Prompt(intentPrompt);
            String jsonResponse = chatClient.call(prompt).getResult().getOutput().getContent();
            String cleanJson = cleanJsonResponse(jsonResponse);
            
            System.out.println("DEBUG: AI Response: " + jsonResponse);
            System.out.println("DEBUG: Cleaned JSON: " + cleanJson);
            
            IntentClassificationDTO result = objectMapper.readValue(cleanJson, IntentClassificationDTO.class);
            System.out.println("DEBUG: Parsed Intent: " + result.getIntent() + ", Confidence: " + result.getConfidence());
            
            // Fix: Handle multiple intents separated by |
            String intent = result.getIntent();
            if (intent != null && intent.contains("|")) {
                String[] intents = intent.split("\\|");
                // Prioritize ADVICE over SEARCH
                if (intents.length > 0) {
                    for (String singleIntent : intents) {
                        if ("ADVICE".equalsIgnoreCase(singleIntent.trim())) {
                            intent = "ADVICE";
                            break;
                        }
                    }
                    // If no ADVICE found, take the first one
                    if (intent.contains("|")) {
                        intent = intents[0].trim();
                    }
                }
                result.setIntent(intent);
                System.out.println("DEBUG: Fixed Intent: " + intent);
            }
            
            return result;
        } catch (Exception e) {
            System.err.println("DEBUG: Error in AI classification: " + e.getMessage());
            // Fallback logic c·∫£i thi·ªán
            IntentClassificationDTO fallback = new IntentClassificationDTO();
            fallback.setIntent(determineIntentFallback(intentPrompt));
            fallback.setConfidence("LOW");
            System.out.println("DEBUG: Using fallback intent: " + fallback.getIntent());
            return fallback;
        }
    }

    private String determineIntentFallback(String userInput) {
        String lowerInput = userInput.toLowerCase();
        
        System.out.println("DEBUG: Analyzing intent for: " + userInput);
        System.out.println("DEBUG: Lower input: " + lowerInput);
        
        // SHIPPING - ∆∞u ti√™n cao nh·∫•t cho shipping (tr∆∞·ªõc SEARCH ƒë·ªÉ tr√°nh conflict)
        if (lowerInput.contains("ship") || lowerInput.contains("giao") || lowerInput.contains("v·∫≠n chuy·ªÉn") ||
            lowerInput.contains("th·ªùi gian") || lowerInput.contains("bao l√¢u") || lowerInput.contains("mi·ªÖn ph√≠") ||
            lowerInput.contains("ph√≠ ship") || lowerInput.contains("giao h√†ng") || lowerInput.contains("ƒë·∫øn") ||
            lowerInput.contains("ha noi") || lowerInput.contains("h√† n·ªôi") || lowerInput.contains("tp.hcm") ||
            lowerInput.contains("s√†i g√≤n") || lowerInput.contains("h·ªì ch√≠ minh") || lowerInput.contains("ho√†n h√†ng") ||
            lowerInput.contains("ƒë·ªïi tr·∫£") || lowerInput.contains("tr·∫£ h√†ng") || lowerInput.contains("ho√†n ti·ªÅn")) {
            System.out.println("DEBUG: Detected SHIPPING intent");
            return "SHIPPING";
        }
        
        // ADVICE - ∆∞u ti√™n cao cho t∆∞ v·∫•n
        if (lowerInput.contains("t∆∞ v·∫•n") || lowerInput.contains("g·ª£i √Ω") || lowerInput.contains("khuy√™n") ||
            lowerInput.contains("b√°n ch·∫°y") || lowerInput.contains("ph·ªï bi·∫øn") || lowerInput.contains("n·ªïi ti·∫øng") ||
            lowerInput.contains("ƒë·ªÅ xu·∫•t") || lowerInput.contains("gi·ªõi thi·ªáu")) {
            System.out.println("DEBUG: Detected ADVICE intent");
            return "ADVICE";
        }
        
        // SEARCH - t√¨m ki·∫øm s·∫£n ph·∫©m c·ª• th·ªÉ (lo·∫°i b·ªè c√°c t·ª´ c√≥ th·ªÉ conflict v·ªõi SHIPPING)
        if (lowerInput.contains("t√¨m") || lowerInput.contains("mua") || lowerInput.contains("c√≥") || 
            lowerInput.contains("lego") || lowerInput.contains("xe") || lowerInput.contains("robot") ||
            lowerInput.contains("s·∫£n ph·∫©m") || lowerInput.contains("ƒë·ªì ch∆°i") || lowerInput.contains("cho t√¥i") ||
            lowerInput.contains("tu·ªïi") || lowerInput.contains("xu·∫•t x·ª©") || 
            lowerInput.contains("trung qu·ªëc") || lowerInput.contains("ƒë·ª©c") || lowerInput.contains("m·ªπ") || 
            lowerInput.contains("nh·∫≠t") || lowerInput.contains("h√†n qu·ªëc")) {
            System.out.println("DEBUG: Detected SEARCH intent");
            return "SEARCH";
        }
        
        // FAQ - c√¢u h·ªèi th∆∞·ªùng g·∫∑p
        if (lowerInput.contains("b·∫£o h√†nh") || lowerInput.contains("thanh to√°n") || lowerInput.contains("ƒë·ªïi tr·∫£") ||
            lowerInput.contains("li√™n h·ªá") || lowerInput.contains("hotline") || lowerInput.contains("ch√≠nh s√°ch")) {
            System.out.println("DEBUG: Detected FAQ intent");
            return "FAQ";
        }
        
        System.out.println("DEBUG: Defaulting to GENERAL intent");
        return "GENERAL";
    }

    private List<SanPham> searchProductsWithContext(String userInput, List<ChatMemory> chatHistory) {
        try {
            // C·∫£i thi·ªán: S·ª≠ d·ª•ng logic ph√¢n t√≠ch ƒë∆°n gi·∫£n tr∆∞·ªõc khi g·ªçi AI
            SearchRequestDTO request = parseSearchRequestFromInput(userInput);
            
            if (request.getTen() != null || request.getDoTuoi() != null || request.getXuatXu() != null) {
                System.out.println("DEBUG: Using parsed search criteria: " + request);
                List<SanPham> products = searchWithNativeQuery(request);
                System.out.println("DEBUG: Found " + products.size() + " products with parsed criteria");
                return products;
            }
            
            // N·∫øu kh√¥ng parse ƒë∆∞·ª£c, m·ªõi d√πng AI
        String contextInfo = buildContextFromHistory(chatHistory);
        
        String searchPrompt = String.format("""
            B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√¨m ki·∫øm LEGO.
            
            **NG·ªÆ C·∫¢NH:** %s
            **C√ÇU T√åM KI·∫æM:** "%s"
            
            Tr·∫£ v·ªÅ JSON v·ªõi th√¥ng tin t√¨m ki·∫øm:
            {
              "ten": null,
              "gia": null,
              "doTuoi": "ƒë·ªô tu·ªïi (v√≠ d·ª•: 5, 6, 12, 18)",
              "xuatXu": "xu·∫•t x·ª© (v√≠ d·ª•: Trung Qu·ªëc, ƒê·ª©c, M·ªπ, Th√°i Lan)",
              "thuongHieu": "th∆∞∆°ng hi·ªáu LEGO",
              "boSuuTap": "b·ªô s∆∞u t·∫≠p",
              "soLuongManhGhepMin": null,
              "danhGiaToiThieu": null
            }
            
            **QUAN TR·ªåNG - PH√ÇN BI·ªÜT R√ï R√ÄNG:**
            - "ten": Ch·ªâ ƒëi·ªÅn t√™n s·∫£n ph·∫©m c·ª• th·ªÉ (v√≠ d·ª•: "LEGO Technic", "LEGO City", "LEGO Star Wars")
            - "xuatXu": ƒêi·ªÅn xu·∫•t x·ª© s·∫£n xu·∫•t (v√≠ d·ª•: "Trung Qu·ªëc", "ƒê·ª©c", "M·ªπ", "Th√°i Lan", "Nh·∫≠t B·∫£n")
            - KH√îNG ƒëi·ªÅn "ten" cho: "tr·∫ª 12 tu·ªïi", "cho tr·∫ª em", "s·∫£n ph·∫©m", "Th√°i Lan", "Trung Qu·ªëc"
            - KH√îNG ƒëi·ªÅn "xuatXu" cho t√™n s·∫£n ph·∫©m
            - N·∫øu c√¢u c√≥ "xu·∫•t x·ª© Th√°i Lan" ‚Üí xuatXu = "Th√°i Lan", ten = null
            - N·∫øu c√¢u c√≥ "LEGO Technic" ‚Üí ten = "LEGO Technic", xuatXu = null (tr·ª´ khi c√≥ xu·∫•t x·ª©)
            - Ch·ªâ ƒëi·ªÅn th√¥ng tin ch·∫Øc ch·∫Øn, ƒë·ªÉ null n·∫øu kh√¥ng r√µ
            """, contextInfo, userInput);

        try {
            Prompt prompt = new Prompt(searchPrompt);
            String jsonResponse = chatClient.call(prompt).getResult().getOutput().getContent();
            String cleanJson = cleanJsonResponse(jsonResponse);
            String processedJson = preprocessJsonNumbers(cleanJson);
                SearchRequestDTO aiRequest = objectMapper.readValue(processedJson, SearchRequestDTO.class);
                System.out.println("DEBUG: AI parsed search criteria: " + aiRequest);
                List<SanPham> products = searchWithRepository(aiRequest);
                System.out.println("DEBUG: Found " + products.size() + " products with AI criteria");
                return products;
        } catch (Exception e) {
                System.err.println("DEBUG: AI parsing failed, using fallback: " + e.getMessage());
                return searchProductsFallback(userInput);
            }
        } catch (Exception e) {
            System.err.println("DEBUG: Search failed, using fallback: " + e.getMessage());
            e.printStackTrace();
            return searchProductsFallback(userInput);
        }
    }

    private List<SanPham> searchProductsFallback(String userInput) {
        // Fallback: t√¨m ki·∫øm theo t·ª´ kh√≥a ƒë∆°n gi·∫£n - OPTIMIZED
        try {
            String[] keywords = userInput.toLowerCase().split("\\s+");
            if (keywords.length == 0 || keywords[0].length() <= 2) {
                return new ArrayList<>();
            }
            
            // S·ª≠ d·ª•ng repository method thay v√¨ load t·∫•t c·∫£ s·∫£n ph·∫©m
            String searchTerm = keywords[0];
            List<SanPham> products = sanPhamRepo.findByTenSanPhamContainingIgnoreCase(searchTerm);
            
            // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m ki·∫øm r·ªông h∆°n
            if (products.isEmpty()) {
                // Th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c
                for (String keyword : keywords) {
                    if (keyword.length() > 2) {
                        products = sanPhamRepo.findByTenSanPhamContainingIgnoreCase(keyword);
                        if (!products.isEmpty()) {
                            break;
                        }
                    }
                }
            }
            
            return products.stream()
                    .limit(3)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            System.err.println("Error in searchProductsFallback: " + e.getMessage());
            return new ArrayList<>();
        }
    }

    private String generateSearchResponse(String userInput, List<SanPham> products, List<ChatMemory> chatHistory) {
        if (products.size() == 1) {
            SanPham product = products.get(0);
            return String.format("üéØ T√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p:\n\n" +
                    "**%s**\n" +
                    "üí∞ Gi√°: %s\n" +
                    "üë∂ ƒê·ªô tu·ªïi: %s\n" +
                    "üè∑Ô∏è Th∆∞∆°ng hi·ªáu: %s\n\n" +
                    "B·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n th√™m v·ªÅ s·∫£n ph·∫©m n√†y kh√¥ng?",
                    product.getTenSanPham(),
                    product.getGia() != null ? String.format("%,.0f ƒë", product.getGia()) : "N/A",
                    product.getDoTuoi(),
                    product.getThuongHieu());
        } else {
            return String.format("üîç T√¨m th·∫•y %d s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n:\n\n" +
                    "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m th√¥ng tin ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ h∆°n kh√¥ng?", products.size());
        }
    }

    // Inner classes for better organization
    private static class UserNeeds {
        private String ageGroup;
        private String interests;
        private BigDecimal budget;
        private String experience;
        private String category;
        
        // Getters and setters
        public String getAgeGroup() { return ageGroup; }
        public void setAgeGroup(String ageGroup) { this.ageGroup = ageGroup; }
        public String getInterests() { return interests; }
        public void setInterests(String interests) { this.interests = interests; }
        public BigDecimal getBudget() { return budget; }
        public void setBudget(BigDecimal budget) { this.budget = budget; }
        public String getExperience() { return experience; }
        public void setExperience(String experience) { this.experience = experience; }
        public String getCategory() { return category; }
        public void setCategory(String category) { this.category = category; }
    }

    private static class FollowUpAnalysis {
        private String analysis;
        private List<SanPham> products;
        
        public FollowUpAnalysis(String analysis, List<SanPham> products) {
            this.analysis = analysis;
            this.products = products;
        }
        
        public String getAnalysis() { return analysis; }
        public List<SanPham> getProducts() { return products; }
    }

    private UserNeeds analyzeUserNeeds(String userInput, List<ChatMemory> chatHistory) {
        String contextInfo = buildContextFromHistory(chatHistory);
        
        String analysisPrompt = String.format("""
            Ph√¢n t√≠ch nhu c·∫ßu ng∆∞·ªùi d√πng t·ª´ c√¢u t∆∞ v·∫•n v√† ng·ªØ c·∫£nh.
            
            **NG·ªÆ C·∫¢NH:** %s
            **C√ÇU T∆Ø V·∫§N:** "%s"
            
            Tr·∫£ v·ªÅ JSON:
            {
              "ageGroup": "ƒë·ªô tu·ªïi (tr·∫ª em/thanh thi·∫øu ni√™n/ng∆∞·ªùi l·ªõn)",
              "interests": "s·ªü th√≠ch (xe h∆°i/robot/th√†nh ph·ªë/v.v.)",
              "budget": null,
              "experience": "kinh nghi·ªám (m·ªõi b·∫Øt ƒë·∫ßu/trung b√¨nh/n√¢ng cao)",
              "category": "danh m·ª•c LEGO ph√π h·ª£p"
            }
            """, contextInfo, userInput);

        try {
            Prompt prompt = new Prompt(analysisPrompt);
            String jsonResponse = chatClient.call(prompt).getResult().getOutput().getContent();
            String cleanJson = cleanJsonResponse(jsonResponse);
            return objectMapper.readValue(cleanJson, UserNeeds.class);
        } catch (Exception e) {
            UserNeeds needs = new UserNeeds();
            needs.setAgeGroup("tr·∫ª em");
            needs.setExperience("m·ªõi b·∫Øt ƒë·∫ßu");
            return needs;
        }
    }

    private List<SanPham> findProductsByNeeds(UserNeeds needs) {
        try {
            SearchRequestDTO criteria = new SearchRequestDTO();
            
            // Set criteria based on needs
            if (needs.getAgeGroup() != null) {
                criteria.setDoTuoi(extractAgeFromGroup(needs.getAgeGroup()));
            }
            if (needs.getCategory() != null) {
                criteria.setThuongHieu(needs.getCategory());
            }
            
            List<SanPham> products = searchWithRepository(criteria);
            
            // If no products found, try alternative search
            if (products.isEmpty()) {
                products = findAlternativeProducts(criteria);
            }
            
            return products.stream().limit(3).collect(Collectors.toList());
            
        } catch (Exception e) {
            return findAlternativeProducts(new SearchRequestDTO());
        }
    }

    /**
     * T√¨m s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t - OPTIMIZED v·ªõi caching
     */
    private List<SanPham> findBestSellingProducts() {
        String cacheKey = "best_selling";
        
        // Ki·ªÉm tra cache tr∆∞·ªõc
        if (isCacheValid(cacheKey)) {
            List<SanPham> cached = bestSellingCache.get(cacheKey);
            if (cached != null && !cached.isEmpty()) {
                System.out.println("DEBUG: Using cached best selling products: " + cached.size());
                return cached;
            }
        }
        
        try {
            // Th·ª≠ l·∫•y d·ªØ li·ªáu b√°n ch·∫°y t·ª´ 6 th√°ng g·∫ßn nh·∫•t (r·ªông h∆°n)
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusMonths(6);
            
            System.out.println("Searching for best selling products from " + startDate + " to " + endDate);
            
            List<Object[]> results = sanPhamRepo.findTopDaBan(startDate, endDate);
            System.out.println("Found " + results.size() + " results from database");
            
            if (results.isEmpty()) {
                System.out.println("No best selling data found, using fallback");
                List<SanPham> fallback = getFallbackProducts();
                cacheBestSelling(cacheKey, fallback);
                return fallback;
            }
            
            List<String> tenSP = results.stream()
                    .map(r -> (String) r[1])
                    .limit(3) // L·∫•y top 3 s·∫£n ph·∫©m b√°n ch·∫°y
                    .toList();
            
            System.out.println("Product names: " + tenSP);
            
            List<SanPham> products = tenSP.stream()
                    .map(sanPhamRepo::findByTenSanPham)
                    .filter(product -> product != null)
                    .collect(Collectors.toList());
            
            System.out.println("Found " + products.size() + " valid products");
            
            // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o, d√πng fallback
            if (products.isEmpty()) {
                System.out.println("No valid products found, using fallback");
                List<SanPham> fallback = getFallbackProducts();
                cacheBestSelling(cacheKey, fallback);
                return fallback;
            }
            
            // Cache k·∫øt qu·∫£
            cacheBestSelling(cacheKey, products);
            return products;
                    
        } catch (Exception e) {
            System.err.println("Error in findBestSellingProducts: " + e.getMessage());
            e.printStackTrace();
            List<SanPham> fallback = getFallbackProducts();
            cacheBestSelling(cacheKey, fallback);
            return fallback;
        }
    }
    
    /**
     * Fallback: l·∫•y s·∫£n ph·∫©m ph·ªï bi·∫øn - OPTIMIZED
     */
    private List<SanPham> getFallbackProducts() {
        try {
            // S·ª≠ d·ª•ng repository method ƒë·ªÉ l·∫•y s·∫£n ph·∫©m c√≥ ƒë√°nh gi√° t·ªët
            List<SanPham> topRatedProducts = sanPhamRepo.findTop3ByDanhGiaTrungBinhGreaterThanOrderByDanhGiaTrungBinhDesc(0.0);
            
            if (!topRatedProducts.isEmpty()) {
                System.out.println("Fallback: Found " + topRatedProducts.size() + " top rated products");
                return topRatedProducts;
            }
            
            // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m c√≥ ƒë√°nh gi√°, l·∫•y s·∫£n ph·∫©m m·ªõi nh·∫•t
            List<SanPham> recentProducts = sanPhamRepo.findTop3ByOrderByIdDesc();
            System.out.println("Fallback: Found " + recentProducts.size() + " recent products");
            return recentProducts;
            
        } catch (Exception e) {
            System.err.println("Error in getFallbackProducts: " + e.getMessage());
            return new ArrayList<>();
        }
    }

    private Integer extractAgeFromGroup(String ageGroup) {
        if (ageGroup.contains("tr·∫ª em") || ageGroup.contains("nh·ªè")) {
            return 6;
        } else if (ageGroup.contains("thi·∫øu ni√™n")) {
            return 12;
        } else if (ageGroup.contains("ng∆∞·ªùi l·ªõn")) {
            return 18;
        }
        return 18;
    }

    private String generateIntelligentAdvice(String userInput, List<SanPham> products, UserNeeds needs, List<ChatMemory> chatHistory) {
        if (products.isEmpty()) {
            return "D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n, t√¥i khuy√™n b·∫°n n√™n xem x√©t c√°c b·ªô LEGO c∆° b·∫£n ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi. " +
                    "Vui l√≤ng cho bi·∫øt th√™m th√¥ng tin ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ h∆°n!";
        }

        String contextInfo = buildContextFromHistory(chatHistory);

        String advicePrompt = String.format("""
            B·∫°n l√† chuy√™n gia t∆∞ v·∫•n LEGO chuy√™n nghi·ªáp.
            
            **NG·ªÆ C·∫¢NH:** %s
            **Y√äU C·∫¶U:** "%s"
            **PH√ÇN T√çCH NHU C·∫¶U:** %s
            **S·∫¢N PH·∫®M G·ª¢I √ù:** %s
            
            H√£y vi·∫øt l·ªùi t∆∞ v·∫•n chuy√™n nghi·ªáp, th√¢n thi·ªán (150-200 t·ª´):
            - Gi·∫£i th√≠ch t·∫°i sao ch·ªçn nh·ªØng s·∫£n ph·∫©m n√†y
            - ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ
            - H∆∞·ªõng d·∫´n c√°ch ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p
            - S·ª≠ d·ª•ng emoji ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán
            """, contextInfo, userInput, formatUserNeeds(needs), formatProductsForAdvice(products));

        try {
            Prompt prompt = new Prompt(advicePrompt);
            return chatClient.call(prompt).getResult().getOutput().getContent().trim();
        } catch (Exception e) {
            return String.format("üí° D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n, t√¥i g·ª£i √Ω %d s·∫£n ph·∫©m LEGO ph√π h·ª£p ƒë∆∞·ª£c ch·ªçn l·ªçc k·ªπ c√†ng. " +
                    "Nh·ªØng s·∫£n ph·∫©m n√†y ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi v√† s·ªü th√≠ch c·ªßa b·∫°n.", products.size());
        }
    }

    private String generateBestSellingAdvice(String userInput, List<SanPham> products) {
        if (products.isEmpty()) {
            return "üî• Hi·ªán t·∫°i ch∆∞a c√≥ d·ªØ li·ªáu v·ªÅ s·∫£n ph·∫©m b√°n ch·∫°y. T√¥i s·∫Ω t∆∞ v·∫•n cho b·∫°n m·ªôt s·ªë s·∫£n ph·∫©m LEGO ph·ªï bi·∫øn!";
        }

        try {
            String advicePrompt = String.format("""
                B·∫°n l√† chuy√™n gia t∆∞ v·∫•n LEGO chuy√™n nghi·ªáp.
                
                **Y√äU C·∫¶U KH√ÅCH H√ÄNG:** "%s"
                **S·∫¢N PH·∫®M B√ÅN CH·∫†Y:** %s
                
                H√£y vi·∫øt l·ªùi t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m b√°n ch·∫°y (150-200 t·ª´):
                - Gi·∫£i th√≠ch t·∫°i sao nh·ªØng s·∫£n ph·∫©m n√†y b√°n ch·∫°y
                - ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ cho t·ª´ng s·∫£n ph·∫©m
                - Nh·∫•n m·∫°nh ∆∞u ƒëi·ªÉm v√† ph√π h·ª£p v·ªõi ƒë·ªëi t∆∞·ª£ng n√†o
                - S·ª≠ d·ª•ng emoji ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán
                - K·∫øt th√∫c b·∫±ng l·ªùi khuy√™n chung
                """, userInput, formatProductsForAdvice(products));

            Prompt prompt = new Prompt(advicePrompt);
            return chatClient.call(prompt).getResult().getOutput().getContent().trim();
        } catch (Exception e) {
            System.err.println("Error in generateBestSellingAdvice: " + e.getMessage());
            return String.format("üî• **TOP %d S·∫¢N PH·∫®M B√ÅN CH·∫†Y NH·∫§T** üî•\n\n" +
                    "D·ª±a tr√™n d·ªØ li·ªáu b√°n h√†ng 3 th√°ng g·∫ßn nh·∫•t, ƒë√¢y l√† nh·ªØng s·∫£n ph·∫©m LEGO ƒë∆∞·ª£c kh√°ch h√†ng y√™u th√≠ch nh·∫•t:\n\n" +
                    "%s\n\n" +
                    "üí° **L·ªùi khuy√™n:** Nh·ªØng s·∫£n ph·∫©m n√†y ƒë·ªÅu c√≥ ch·∫•t l∆∞·ª£ng cao, ph√π h·ª£p v·ªõi nhi·ªÅu ƒë·ªô tu·ªïi v√† ƒë∆∞·ª£c ƒë√°nh gi√° t·ªët t·ª´ kh√°ch h√†ng. " +
                    "B·∫°n c√≥ th·ªÉ ch·ªçn theo s·ªü th√≠ch ho·∫∑c li√™n h·ªá t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n!",
                    products.size(), formatProductsForAdvice(products));
        }
    }

    private String formatUserNeeds(UserNeeds needs) {
        return String.format("ƒê·ªô tu·ªïi: %s, S·ªü th√≠ch: %s, Kinh nghi·ªám: %s, Danh m·ª•c: %s",
                needs.getAgeGroup() != null ? needs.getAgeGroup() : "N/A",
                needs.getInterests() != null ? needs.getInterests() : "N/A",
                needs.getExperience() != null ? needs.getExperience() : "N/A",
                needs.getCategory() != null ? needs.getCategory() : "N/A");
    }

    private FollowUpAnalysis analyzeFollowUpQuestion(String userInput, List<ChatMemory> chatHistory) {
        String contextInfo = buildContextFromHistory(chatHistory);
        
        String analysisPrompt = String.format("""
            Ph√¢n t√≠ch c√¢u h·ªèi follow-up v√† x√°c ƒë·ªãnh c·∫ßn t√¨m ki·∫øm s·∫£n ph·∫©m kh√¥ng.
            
            **NG·ªÆ C·∫¢NH:** %s
            **C√ÇU H·ªéI:** "%s"
            
            Tr·∫£ v·ªÅ JSON:
            {
              "analysis": "ph√¢n t√≠ch ng·∫Øn g·ªçn v·ªÅ c√¢u h·ªèi",
              "needProducts": true/false,
              "searchCriteria": "ti√™u ch√≠ t√¨m ki·∫øm n·∫øu c·∫ßn"
            }
            """, contextInfo, userInput);

        try {
            Prompt prompt = new Prompt(analysisPrompt);
            String jsonResponse = chatClient.call(prompt).getResult().getOutput().getContent();
            String cleanJson = cleanJsonResponse(jsonResponse);
            JsonNode node = objectMapper.readTree(cleanJson);
            
            String analysis = node.get("analysis").asText();
            boolean needProducts = node.get("needProducts").asBoolean();
            
            List<SanPham> products = new ArrayList<>();
            if (needProducts && node.has("searchCriteria")) {
                String criteria = node.get("searchCriteria").asText();
                products = searchProductsWithContext(criteria, chatHistory);
            }
            
            return new FollowUpAnalysis(analysis, products);
            
        } catch (Exception e) {
            return new FollowUpAnalysis("C√¢u h·ªèi follow-up v·ªÅ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc", new ArrayList<>());
        }
    }

    private List<SanPham> findAlternativeProducts(SearchRequestDTO originalCriteria) {
        try {
            // T·∫°o ti√™u ch√≠ r·ªông h∆°n
            SearchRequestDTO relaxedCriteria = new SearchRequestDTO();

            if (originalCriteria.getDoTuoi() != null) {
                relaxedCriteria.setDoTuoi(originalCriteria.getDoTuoi());
            }
            if (originalCriteria.getGia() != null) {
                relaxedCriteria.setGia(originalCriteria.getGia());
            }

            List<SanPham> products = searchWithRepository(relaxedCriteria);

            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusMonths(1);
            // N·∫øu v·∫´n tr·ªëng, l·∫•y s·∫£n ph·∫©m b√°n ch·∫°y
            if (products.isEmpty()) {
                List<Object[]> results = sanPhamRepo.findTopDaBan(startDate, endDate);
                List<String> tenSP = results.stream()
                        .map(r -> (String) r[1])
                        .toList();
                products = tenSP.stream()
                        .map(sanPhamRepo::findByTenSanPham)
                        .toList();
            }

            return products.stream().limit(8).collect(Collectors.toList());

        } catch (Exception e) {
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusMonths(1);
            List<Object[]> results = sanPhamRepo.findTopDaBan(startDate, endDate);
            List<String> tenSP = results.stream()
                    .map(r -> (String) r[1])
                    .toList();
            return tenSP.stream()
                    .map(sanPhamRepo::findByTenSanPham)
                    .toList();
        }
    }

    private String determineFAQResponse(String lowerInput) {
        if (lowerInput.contains("b·∫£o h√†nh")) {
            return faqDatabase.get("WARRANTY");
        } else if (lowerInput.contains("thanh to√°n")) {
            return faqDatabase.get("PAYMENT");
        } else if (lowerInput.contains("ƒë·ªïi") || lowerInput.contains("tr·∫£")) {
            return faqDatabase.get("RETURN");
        } else if (lowerInput.contains("li√™n h·ªá")) {
            return faqDatabase.get("CONTACT");
        } else {
            return "üìã **C√¢u h·ªèi th∆∞·ªùng g·∫∑p:**\n\n" +
                    "üöö " + faqDatabase.get("SHIPPING") + "\n\n" +
                    "üõ°Ô∏è " + faqDatabase.get("WARRANTY") + "\n\n" +
                    "üí≥ " + faqDatabase.get("PAYMENT") + "\n\n" +
                    "üîÑ " + faqDatabase.get("RETURN") + "\n\n" +
                    "üìû " + faqDatabase.get("CONTACT");
        }
    }

    private String formatProductsForAdvice(List<SanPham> products) {
        return products.stream()
                .limit(5)
                .map(p -> String.format("- %s | Gi√°: %s | ƒê·ªô tu·ªïi: %s",
                        p.getTenSanPham() != null ? p.getTenSanPham() : "N/A",
                        p.getGia() != null ? String.format("%,.0f ƒë", p.getGia()) : "N/A",
                        p.getDoTuoi() != null ? p.getDoTuoi() : "N/A"))
                .collect(Collectors.joining("\n"));
    }

    /**
     * Search Request Parsing - IMPROVED
     */
    private SearchRequestDTO parseSearchRequestFromInput(String userInput) {
        SearchRequestDTO request = new SearchRequestDTO();
        String lowerInput = userInput.toLowerCase();
        
        // Parse ƒë·ªô tu·ªïi (s·ª≠ d·ª•ng logic ph√π h·ª£p v·ªõi database)
        if (lowerInput.contains("5 tu·ªïi") || lowerInput.contains("5 tuoi")) {
            request.setDoTuoi(5);
        } else if (lowerInput.contains("6 tu·ªïi") || lowerInput.contains("6 tuoi")) {
            request.setDoTuoi(6);
        } else if (lowerInput.contains("7 tu·ªïi") || lowerInput.contains("7 tuoi")) {
            request.setDoTuoi(7);
        } else if (lowerInput.contains("8 tu·ªïi") || lowerInput.contains("8 tuoi")) {
            request.setDoTuoi(8);
        } else if (lowerInput.contains("9 tu·ªïi") || lowerInput.contains("9 tuoi")) {
            request.setDoTuoi(9);
        } else if (lowerInput.contains("10 tu·ªïi") || lowerInput.contains("10 tuoi")) {
            request.setDoTuoi(10);
        } else if (lowerInput.contains("11 tu·ªïi") || lowerInput.contains("11 tuoi")) {
            request.setDoTuoi(11);
        } else if (lowerInput.contains("12 tu·ªïi") || lowerInput.contains("12 tuoi")) {
            request.setDoTuoi(12);
        } else if (lowerInput.contains("18 tu·ªïi") || lowerInput.contains("18 tuoi")) {
            request.setDoTuoi(18);
        } else if (lowerInput.contains("tr·∫ª em") || lowerInput.contains("tre em")) {
            request.setDoTuoi(6);
        } else if (lowerInput.contains("thi·∫øu ni√™n") || lowerInput.contains("thieu nien")) {
            request.setDoTuoi(12);
        } else if (lowerInput.contains("ng∆∞·ªùi l·ªõn") || lowerInput.contains("nguoi lon")) {
            request.setDoTuoi(18);
        }
        
        // Parse xu·∫•t x·ª© - Handle encoding issues (∆ØU TI√äN CAO)
        if (lowerInput.contains("trung qu·ªëc") || lowerInput.contains("trung quoc")) {
            request.setXuatXu("Trung Qu·ªëc"); // Database has encoding issue
        } else if (lowerInput.contains("ƒë·ª©c") || lowerInput.contains("duc")) {
            request.setXuatXu("ƒê·ª©c");
        } else if (lowerInput.contains("mƒ©") || lowerInput.contains("mi")) {
            request.setXuatXu("Mƒ©"); // Database has encoding issue
        } else if (lowerInput.contains("nh·∫≠t") || lowerInput.contains("nhat") || lowerInput.contains("nh·∫≠t b·∫£n")) {
            request.setXuatXu("Nh·∫≠t B·∫£n"); // Database has encoding issue
        } else if (lowerInput.contains("h√†n qu·ªëc") || lowerInput.contains("han quoc")) {
            request.setXuatXu("H√†n Qu·ªëc");
        } else if (lowerInput.contains("ƒëan m·∫°ch") || lowerInput.contains("dan mach")) {
            request.setXuatXu("ƒêan m·∫°ch");
        } else if (lowerInput.contains("vi·ªát nam") || lowerInput.contains("viet nam")) {
            request.setXuatXu("Vi·ªát nam");
        } else if (lowerInput.contains("th√°i lan") || lowerInput.contains("thai lan")) {
            request.setXuatXu("Th√°i Lan");
        }
        
        // Parse th∆∞∆°ng hi·ªáu
        if (lowerInput.contains("lego")) {
            request.setThuongHieu("LEGO");
        }
        
        // Parse t√™n s·∫£n ph·∫©m (ch·ªâ khi KH√îNG c√≥ xu·∫•t x·ª© ƒë∆∞·ª£c parse)
        if (request.getXuatXu() == null) {
            String[] words = userInput.split("\\s+");
            List<String> productWords = new ArrayList<>();
            
            for (String word : words) {
                String lowerWord = word.toLowerCase();
                if (!lowerWord.contains("tu·ªïi") && !lowerWord.contains("tuoi") &&
                    !lowerWord.contains("trung") && !lowerWord.contains("qu·ªëc") && !lowerWord.contains("quoc") &&
                    !lowerWord.contains("ƒë·ª©c") && !lowerWord.contains("duc") &&
                    !lowerWord.contains("m·ªπ") && !lowerWord.contains("my") &&
                    !lowerWord.contains("nh·∫≠t") && !lowerWord.contains("nhat") &&
                    !lowerWord.contains("h√†n") && !lowerWord.contains("han") &&
                    !lowerWord.contains("qu·ªëc") && !lowerWord.contains("quoc") &&
                    !lowerWord.contains("ƒëan") && !lowerWord.contains("m·∫°ch") && !lowerWord.contains("mach") &&
                    !lowerWord.contains("vi·ªát") && !lowerWord.contains("viet") && !lowerWord.contains("nam") &&
                    !lowerWord.contains("th√°i") && !lowerWord.contains("thai") && !lowerWord.contains("lan") &&
                    !lowerWord.contains("lego") && !lowerWord.contains("cho") && !lowerWord.contains("t√¥i") &&
                    !lowerWord.contains("t√¨m") && !lowerWord.contains("tim") &&
                    !lowerWord.contains("s·∫£n") && !lowerWord.contains("san") &&
                    !lowerWord.contains("ph·∫©m") && !lowerWord.contains("pham") &&
                    !lowerWord.contains("v√†") && !lowerWord.contains("va") &&
                    !lowerWord.contains("xu·∫•t") && !lowerWord.contains("xuat") &&
                    !lowerWord.contains("x·ª©") && !lowerWord.contains("xu") &&
                    !lowerWord.contains("tr·∫ª") && !lowerWord.contains("tre") &&
                    !lowerWord.contains("gi√∫p") && !lowerWord.contains("giup") &&
                    word.length() > 1) {
                    productWords.add(word);
                }
            }
            
            // Ch·ªâ set t√™n n·∫øu c√≥ t·ª´ kh√≥a s·∫£n ph·∫©m th·ª±c s·ª± (kh√¥ng ph·∫£i t·ª´ m√¥ t·∫£)
            if (!productWords.isEmpty()) {
                String productName = String.join(" ", productWords);
                // Ki·ªÉm tra xem c√≥ ph·∫£i l√† t√™n s·∫£n ph·∫©m th·ª±c s·ª± kh√¥ng
                if (!productName.toLowerCase().contains("tu·ªïi") && 
                    !productName.toLowerCase().contains("tr·∫ª") &&
                    !productName.toLowerCase().contains("cho") &&
                    !productName.toLowerCase().contains("xu·∫•t") &&
                    !productName.toLowerCase().contains("x·ª©") &&
                    productName.length() > 2) {
                    request.setTen(productName);
                }
            }
        }
        
        System.out.println("DEBUG: Parsed search request: " + request);
        return request;
    }

    /**
     * Cache Management Methods - OPTIMIZED
     */
    private String normalizeInputForCache(String input) {
        if (input == null) return "";
        return input.toLowerCase()
                .replaceAll("[^a-z0-9\\s]", "")
                .replaceAll("\\s+", "_")
                .trim();
    }
    
    private boolean isCacheValid(String cacheKey) {
        Long timestamp = cacheTimestamps.get(cacheKey);
        if (timestamp == null) return false;
        return (System.currentTimeMillis() - timestamp) < CACHE_TTL;
    }
    
    private List<SanPham> getCachedProducts(String cacheKey) {
        if (isCacheValid(cacheKey)) {
            List<SanPham> cachedProducts = searchCache.get(cacheKey);
            if (cachedProducts != null) {
                // Filter out products that are not in business - ch·ªâ filter theo tr·∫°ng th√°i
                List<SanPham> activeProducts = cachedProducts.stream()
                        .filter(p -> p.getTrangThai() != null && 
                                   !p.getTrangThai().equals("Ng·ª´ng kinh doanh") &&
                                   !p.getTrangThai().equals("H·∫øt h√†ng"))
                        .collect(Collectors.toList());
                
                System.out.println("DEBUG: Cached products: " + cachedProducts.size() + 
                                 ", Active products: " + activeProducts.size());
                
                return activeProducts.isEmpty() ? null : activeProducts;
            }
        }
        return null;
    }
    
    private void cacheProducts(String cacheKey, List<SanPham> products) {
        searchCache.put(cacheKey, products);
        cacheTimestamps.put(cacheKey, System.currentTimeMillis());
    }
    
    private void cacheBestSelling(String cacheKey, List<SanPham> products) {
        bestSellingCache.put(cacheKey, products);
        cacheTimestamps.put(cacheKey, System.currentTimeMillis());
    }
    
    private boolean isClearSearchIntent(String userInput) {
        String lowerInput = userInput.toLowerCase();
        // Ki·ªÉm tra c√°c t·ª´ kh√≥a t√¨m ki·∫øm r√µ r√†ng
        return (lowerInput.contains("t√¨m") && lowerInput.contains("cho")) ||
               (lowerInput.contains("t√¨m") && lowerInput.contains("tu·ªïi")) ||
               (lowerInput.contains("t√¨m") && lowerInput.contains("xu·∫•t x·ª©")) ||
               (lowerInput.contains("cho") && lowerInput.contains("tu·ªïi")) ||
               (lowerInput.contains("cho") && lowerInput.contains("xu·∫•t x·ª©")) ||
               (lowerInput.contains("tu·ªïi") && lowerInput.contains("xu·∫•t x·ª©")) ||
               (lowerInput.contains("trung qu·ªëc") || lowerInput.contains("ƒë·ª©c") || 
                lowerInput.contains("m·ªπ") || lowerInput.contains("nh·∫≠t"));
    }
    
    private boolean isComplexIntent(String userInput) {
        String lowerInput = userInput.toLowerCase();
        // Ch·ªâ g·ªçi AI cho c√°c tr∆∞·ªùng h·ª£p ph·ª©c t·∫°p
        return lowerInput.length() > 20 || 
               lowerInput.contains("v√†") || 
               lowerInput.contains("ho·∫∑c") ||
               lowerInput.contains("nh∆∞ng") ||
               lowerInput.contains("tuy nhi√™n") ||
               lowerInput.split("\\s+").length > 8;
    }
    
    /**
     * Clear cache periodically (c√≥ th·ªÉ g·ªçi t·ª´ scheduler)
     */
    public void clearExpiredCache() {
        long currentTime = System.currentTimeMillis();
        cacheTimestamps.entrySet().removeIf(entry -> 
            (currentTime - entry.getValue()) > CACHE_TTL);
        
        // Clear corresponding cache entries
        searchCache.keySet().removeIf(key -> !cacheTimestamps.containsKey(key));
        intentCache.keySet().removeIf(key -> !cacheTimestamps.containsKey(key));
        bestSellingCache.keySet().removeIf(key -> !cacheTimestamps.containsKey(key));
    }
    
    /**
     * Clear all cache manually
     */
    public void clearAllCache() {
        searchCache.clear();
        intentCache.clear();
        bestSellingCache.clear();
        cacheTimestamps.clear();
        System.out.println("DEBUG: All cache cleared");
    }
    
    /**
     * Clear search cache only
     */
    public void clearSearchCache() {
        searchCache.clear();
        cacheTimestamps.entrySet().removeIf(entry -> 
            entry.getKey().startsWith("search_"));
        System.out.println("DEBUG: Search cache cleared");
    }

    
    /**
     * Method ƒë·ªÉ g·ªçi native query v·ªõi DTO object (wrapper)
     */
    private List<SanPham> searchWithNativeQuery(SearchRequestDTO request) {
        return searchWithRepository(request);
    }
    
    /**
     * Method ƒë·ªÉ g·ªçi repository v·ªõi DTO object
     */
    private List<SanPham> searchWithRepository(SearchRequestDTO request) {
        try {
            System.out.println("DEBUG: searchWithRepository called with:");
            System.out.println("  - doTuoi: " + request.getDoTuoi());
            System.out.println("  - ten: " + request.getTen());
            System.out.println("  - gia: " + request.getGia());
            System.out.println("  - xuatXu: " + request.getXuatXu());
            
            return sanPhamRepo.timKiemTheoDieuKien(request);
        } catch (Exception e) {
            System.err.println("DEBUG: Repository search failed: " + e.getMessage());
            e.printStackTrace();
            return new ArrayList<>();
        }
    }
    
    /**
     * Method ƒë·ªÉ g·ªçi native query v·ªõi encoding handling
     */
    private List<SanPham> searchWithNativeQuery(Integer doTuoi, String ten, BigDecimal gia, 
                                               String xuatXu, String thuongHieu, String boSuuTap,
                                               Integer soLuongManhGhepMin, Double danhGiaToiThieu) {
        try {
            SearchRequestDTO request = new SearchRequestDTO();
            request.setDoTuoi(doTuoi);
            request.setTen(ten);
            request.setGia(gia);
            request.setXuatXu(xuatXu);
            request.setThuongHieu(thuongHieu);
            request.setBoSuuTap(boSuuTap);
            request.setSoLuongManhGhepMin(soLuongManhGhepMin);
            request.setDanhGiaToiThieu(danhGiaToiThieu);
            
            List<SanPham> products = sanPhamRepo.timKiemTheoDieuKien(request);
            
            System.out.println("DEBUG: Native query found " + products.size() + " products");
            return products;
            
        } catch (Exception e) {
            System.err.println("DEBUG: Native query failed: " + e.getMessage());
            e.printStackTrace();
            return new ArrayList<>();
        }
    }
    
    /**
     * Test method ƒë·ªÉ ki·ªÉm tra native query
     */
    public void testNativeQuery() {
        try {
            System.out.println("DEBUG: Testing native query...");
            
            // Test v·ªõi c√°c input kh√°c nhau
            String[] testInputs = {
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© t·ª´ nhat",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© t·ª´ Nh·∫≠t B·∫£n",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© t·ª´ m·ªπ",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© t·ª´ trung qu·ªëc"
            };
            
            for (String input : testInputs) {
                System.out.println("---");
                System.out.println("DEBUG: Testing input: " + input);
                
                // Test parsing
                SearchRequestDTO request = parseSearchRequestFromInput(input);
                System.out.println("DEBUG: Parsed request: " + request);
                
                // Test native query
                List<SanPham> products = searchWithRepository(request);
                System.out.println("DEBUG: Native query results: " + products.size() + " products");
                
                if (!products.isEmpty()) {
                    System.out.println("DEBUG: Sample product: " + products.get(0).getTenSanPham() + 
                        " | Origin: " + (products.get(0).getXuatXu() != null ? products.get(0).getXuatXu().getTen() : "NULL"));
                }
            }
            
        } catch (Exception e) {
            System.err.println("DEBUG: Native query test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Debug method ƒë·ªÉ trace search flow c·ª• th·ªÉ
     */
    public String debugSearchFlow() {
        try {
            System.out.println("=== DEBUG SEARCH FLOW ===");
            
            String userInput = "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m cho tr·∫ª 12 tu·ªïi";
            System.out.println("1. User input: " + userInput);
            
            // Test parseSearchRequestFromInput
            SearchRequestDTO request = parseSearchRequestFromInput(userInput);
            System.out.println("2. Parsed request: " + request);
            System.out.println("   - doTuoi: " + request.getDoTuoi());
            System.out.println("   - ten: " + request.getTen());
            System.out.println("   - gia: " + request.getGia());
            System.out.println("   - xuatXu: " + request.getXuatXu());
            
            // Test searchWithRepository
            System.out.println("3. Calling searchWithRepository...");
            List<SanPham> products = searchWithRepository(request);
            System.out.println("4. Search results: " + products.size() + " products");
            
            if (!products.isEmpty()) {
                System.out.println("   Sample products:");
                products.stream().limit(3).forEach(p -> 
                    System.out.println("   - " + p.getTenSanPham() + " | Age: " + p.getDoTuoi() + " | Status: " + p.getTrangThai()));
            }
            
            // Test direct repository call
            System.out.println("5. Testing direct repository call...");
            SearchRequestDTO directRequest = new SearchRequestDTO();
            directRequest.setDoTuoi(12);
            List<SanPham> directProducts = sanPhamRepo.timKiemTheoDieuKien(directRequest);
            System.out.println("6. Direct repository results: " + directProducts.size() + " products");
            
            return "Debug completed - check console for full trace";
            
        } catch (Exception e) {
            System.err.println("Debug search flow failed: " + e.getMessage());
            e.printStackTrace();
            return "Debug failed: " + e.getMessage();
        }
    }
    
    /**
     * Debug method ƒë∆°n gi·∫£n ƒë·ªÉ test query
     */
    public String testSimpleQuery() {
        try {
            System.out.println("=== TESTING SIMPLE QUERY ===");
            
            // Test 1: Query t·∫•t c·∫£ s·∫£n ph·∫©m
            List<SanPham> allProducts = sanPhamRepo.findAll();
            System.out.println("Total products: " + allProducts.size());
            
            if (allProducts.isEmpty()) {
                return "‚ùå NO PRODUCTS IN DATABASE";
            }
            
            // Test 2: Query v·ªõi ƒëi·ªÅu ki·ªán ƒë∆°n gi·∫£n
            SearchRequestDTO testRequest = new SearchRequestDTO();
            testRequest.setDoTuoi(12);
            List<SanPham> testResults = sanPhamRepo.timKiemTheoDieuKien(testRequest);
            System.out.println("Query results for age <= 12: " + testResults.size());
            
            // Test 3: Query kh√¥ng c√≥ ƒëi·ªÅu ki·ªán
            SearchRequestDTO allRequest = new SearchRequestDTO();
            List<SanPham> allResults = sanPhamRepo.timKiemTheoDieuKien(allRequest);
            System.out.println("Query results with no conditions: " + allResults.size());
            
            // Test 4: Query v·ªõi xu·∫•t x·ª© Mƒ©
            SearchRequestDTO originRequest = new SearchRequestDTO();
            originRequest.setXuatXu("Mƒ©");
            List<SanPham> originResults = sanPhamRepo.timKiemTheoDieuKien(originRequest);
            System.out.println("Query results for origin Mƒ©: " + originResults.size());
            
            // Test 5: Query v·ªõi xu·∫•t x·ª© Mƒ© v√† ƒë·ªô tu·ªïi 18
            SearchRequestDTO combinedRequest = new SearchRequestDTO();
            combinedRequest.setXuatXu("Mƒ©");
            combinedRequest.setDoTuoi(18);
            List<SanPham> combinedResults = sanPhamRepo.timKiemTheoDieuKien(combinedRequest);
            System.out.println("Query results for origin Mƒ© and age 18: " + combinedResults.size());
            
            // Test 6: Test parsing "12 tu·ªïi"
            System.out.println("\n=== TESTING PARSING ===");
            String userInput = "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m cho tr·∫ª 12 tu·ªïi";
            SearchRequestDTO parsedRequest = parseSearchRequestFromInput(userInput);
            System.out.println("Parsed request: " + parsedRequest);
            System.out.println("Parsed doTuoi: " + parsedRequest.getDoTuoi());
            
            // Test 7: Test search v·ªõi parsed request
            List<SanPham> parsedResults = sanPhamRepo.timKiemTheoDieuKien(parsedRequest);
            System.out.println("Parsed search results: " + parsedResults.size());
            
            return "Test completed - check console for details. Results: " + testResults.size() + " products found";
            
        } catch (Exception e) {
            System.err.println("Simple query test failed: " + e.getMessage());
            e.printStackTrace();
            return "Test failed: " + e.getMessage();
        }
    }
    
    /**
     * Debug method ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu database
     */
    public String debugDatabaseData() {
        try {
            System.out.println("=== DEBUG DATABASE DATA ===");
            
            // 1. Ki·ªÉm tra t·∫•t c·∫£ s·∫£n ph·∫©m
            List<SanPham> allProducts = sanPhamRepo.findAll();
            System.out.println("Total products in DB: " + allProducts.size());
            
            // 2. Ki·ªÉm tra tr·∫°ng th√°i s·∫£n ph·∫©m
            Map<String, Long> statusCount = allProducts.stream()
                .collect(Collectors.groupingBy(
                    p -> p.getTrangThai() != null ? p.getTrangThai() : "NULL",
                    Collectors.counting()
                ));
            System.out.println("Product status distribution:");
            statusCount.forEach((status, count) -> 
                System.out.println("  " + status + ": " + count));
            
            // 3. Ki·ªÉm tra ƒë·ªô tu·ªïi
            Map<Integer, Long> ageCount = allProducts.stream()
                .filter(p -> p.getDoTuoi() != null)
                .collect(Collectors.groupingBy(SanPham::getDoTuoi, Collectors.counting()));
            System.out.println("Age distribution:");
            ageCount.entrySet().stream()
                .sorted(Map.Entry.comparingByKey())
                .forEach(entry -> 
                    System.out.println("  Age " + entry.getKey() + ": " + entry.getValue()));
            
            // 4. Ki·ªÉm tra s·∫£n ph·∫©m ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán
            List<SanPham> activeProducts = allProducts.stream()
                .filter(p -> p.getTrangThai() != null && p.getTrangThai().contains("ƒêang kinh doanh"))
                .collect(Collectors.toList());
            System.out.println("Active products: " + activeProducts.size());
            
            List<SanPham> age12Products = activeProducts.stream()
                .filter(p -> p.getDoTuoi() != null && p.getDoTuoi() <= 12)
                .collect(Collectors.toList());
            System.out.println("Active products age <= 12: " + age12Products.size());
            
            // 5. Hi·ªÉn th·ªã m·ªôt v√†i s·∫£n ph·∫©m m·∫´u
            System.out.println("Sample active products:");
            activeProducts.stream().limit(5).forEach(p -> 
                System.out.println("  - " + p.getTenSanPham() + 
                    " | Age: " + p.getDoTuoi() + 
                    " | Status: " + p.getTrangThai()));
            
            // 6. Test query tr·ª±c ti·∫øp
            System.out.println("\n=== TESTING DIRECT QUERY ===");
            try {
                SearchRequestDTO queryRequest = new SearchRequestDTO();
                queryRequest.setDoTuoi(12);
                List<SanPham> queryResults = sanPhamRepo.timKiemTheoDieuKien(queryRequest);
                System.out.println("Direct query results: " + queryResults.size());
                
                if (!queryResults.isEmpty()) {
                    System.out.println("Query result samples:");
                    queryResults.stream().limit(3).forEach(p -> 
                        System.out.println("  - " + p.getTenSanPham() + 
                            " | Age: " + p.getDoTuoi() + 
                            " | Status: " + p.getTrangThai()));
                }
                
                // Test query v·ªõi xu·∫•t x·ª© Mƒ©
                System.out.println("\n=== TESTING ORIGIN QUERY ===");
                SearchRequestDTO originRequest = new SearchRequestDTO();
                originRequest.setXuatXu("Mƒ©");
                List<SanPham> originResults = sanPhamRepo.timKiemTheoDieuKien(originRequest);
                System.out.println("Origin Mƒ© query results: " + originResults.size());
                
                // Test query v·ªõi xu·∫•t x·ª© Mƒ© v√† ƒë·ªô tu·ªïi 18
                SearchRequestDTO combinedRequest = new SearchRequestDTO();
                combinedRequest.setXuatXu("Mƒ©");
                combinedRequest.setDoTuoi(18);
                List<SanPham> combinedResults = sanPhamRepo.timKiemTheoDieuKien(combinedRequest);
                System.out.println("Origin Mƒ© + Age 18 query results: " + combinedResults.size());
                
            } catch (Exception e) {
                System.err.println("Direct query failed: " + e.getMessage());
                e.printStackTrace();
            }
            
            return "Debug completed - check console for details";
            
        } catch (Exception e) {
            System.err.println("Database debug failed: " + e.getMessage());
            e.printStackTrace();
            return "Debug failed: " + e.getMessage();
        }
    }
    
    /**
     * Test method ƒë·ªÉ ki·ªÉm tra parsing
     */
    public String testParsing() {
        try {
            System.out.println("=== TESTING PARSING ===");
            
            String userInput = "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m cho tr·∫ª 12 tu·ªïi";
            System.out.println("User input: " + userInput);
            
            SearchRequestDTO parsedRequest = parseSearchRequestFromInput(userInput);
            System.out.println("Parsed request: " + parsedRequest);
            System.out.println("Parsed doTuoi: " + parsedRequest.getDoTuoi());
            System.out.println("Parsed ten: " + parsedRequest.getTen());
            System.out.println("Parsed xuatXu: " + parsedRequest.getXuatXu());
            
            // Test search v·ªõi parsed request
            List<SanPham> parsedResults = sanPhamRepo.timKiemTheoDieuKien(parsedRequest);
            System.out.println("Parsed search results: " + parsedResults.size());
            
            if (!parsedResults.isEmpty()) {
                System.out.println("Sample results:");
                parsedResults.stream().limit(3).forEach(p -> 
                    System.out.println("  - " + p.getTenSanPham() + 
                        " | Age: " + p.getDoTuoi() + 
                        " | Status: " + p.getTrangThai()));
            }
            
            // Test v·ªõi query ƒë∆°n gi·∫£n h∆°n
            System.out.println("\n=== TESTING SIMPLE QUERIES ===");
            
            // Test 1: Query kh√¥ng c√≥ ƒëi·ªÅu ki·ªán
            SearchRequestDTO emptyRequest = new SearchRequestDTO();
            List<SanPham> emptyResults = sanPhamRepo.timKiemTheoDieuKien(emptyRequest);
            System.out.println("Empty query results: " + emptyResults.size());
            
            // Test 2: Query ch·ªâ v·ªõi doTuoi
            SearchRequestDTO ageRequest = new SearchRequestDTO();
            ageRequest.setDoTuoi(12);
            List<SanPham> ageResults = sanPhamRepo.timKiemTheoDieuKien(ageRequest);
            System.out.println("Age 12 query results: " + ageResults.size());
            
            // Test 3: Query v·ªõi doTuoi = null
            SearchRequestDTO nullAgeRequest = new SearchRequestDTO();
            nullAgeRequest.setDoTuoi(null);
            List<SanPham> nullAgeResults = sanPhamRepo.timKiemTheoDieuKien(nullAgeRequest);
            System.out.println("Null age query results: " + nullAgeResults.size());
            
            // Return detailed info instead of just message
            return "Parsing test completed. Parsed doTuoi: " + parsedRequest.getDoTuoi() + 
                   ", Search results: " + parsedResults.size() + " products. " +
                   "Empty query: " + emptyResults.size() + ", Age 12: " + ageResults.size() + 
                   ", Null age: " + nullAgeResults.size();
            
        } catch (Exception e) {
            System.err.println("Parsing test failed: " + e.getMessage());
            e.printStackTrace();
            return "Parsing test failed: " + e.getMessage();
        }
    }
    
    /**
     * Test method ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra API
     */
    public String testSimpleAPI() {
        try {
            System.out.println("=== TESTING SIMPLE API ===");
            
            // Test 1: Query t·∫•t c·∫£ s·∫£n ph·∫©m
            List<SanPham> allProducts = sanPhamRepo.findAll();
            System.out.println("Total products: " + allProducts.size());
            
            // Test 2: Query v·ªõi ƒëi·ªÅu ki·ªán ƒë∆°n gi·∫£n
            SearchRequestDTO request = new SearchRequestDTO();
            request.setDoTuoi(12);
            List<SanPham> results = sanPhamRepo.timKiemTheoDieuKien(request);
            System.out.println("Query results: " + results.size());
            
            return "API test completed. Total: " + allProducts.size() + ", Query results: " + results.size();
            
        } catch (Exception e) {
            System.err.println("API test failed: " + e.getMessage());
            e.printStackTrace();
            return "API test failed: " + e.getMessage();
        }
    }
    
    /**
     * Test method ƒë·ªÉ ki·ªÉm tra search flow ƒë∆°n gi·∫£n
     */
    public void testSimpleSearch() {
        try {
            System.out.println("DEBUG: Testing simple search...");
            
            // Test 1: Search for age 12
            String userInput = "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m cho tr·∫ª 12 tu·ªïi";
            System.out.println("DEBUG: User input: " + userInput);
            
            SearchRequestDTO request = parseSearchRequestFromInput(userInput);
            System.out.println("DEBUG: Parsed request: " + request);
            
            List<SanPham> products = searchWithRepository(request);
            System.out.println("DEBUG: Search results: " + products.size() + " products");
            
            if (!products.isEmpty()) {
                System.out.println("DEBUG: Sample products:");
                products.forEach(p -> System.out.println("  - " + p.getTenSanPham() + 
                    " | Age: " + p.getDoTuoi() + 
                    " | Status: " + p.getTrangThai()));
            }
            
            // Test 2: Direct repository call
            System.out.println("---");
            System.out.println("DEBUG: Testing direct repository call...");
            SearchRequestDTO directRequest = new SearchRequestDTO();
            directRequest.setDoTuoi(12);
            List<SanPham> directProducts = sanPhamRepo.timKiemTheoDieuKien(directRequest);
            System.out.println("DEBUG: Direct call results: " + directProducts.size() + " products");
            
            // Test 3: Check all products
            System.out.println("---");
            System.out.println("DEBUG: Checking all products...");
            List<SanPham> allProducts = sanPhamRepo.findAll();
            System.out.println("DEBUG: Total products: " + allProducts.size());
            
            long activeProducts = allProducts.stream()
                    .filter(p -> p.getTrangThai() != null && p.getTrangThai().contains("ƒêang kinh doanh"))
                    .count();
            System.out.println("DEBUG: Active products: " + activeProducts);
            
            long age12Products = allProducts.stream()
                    .filter(p -> p.getDoTuoi() != null && p.getDoTuoi() <= 12)
                    .count();
            System.out.println("DEBUG: Products age <= 12: " + age12Products);
            
        } catch (Exception e) {
            System.err.println("DEBUG: Simple search test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Test method t·ªïng h·ª£p ƒë·ªÉ ki·ªÉm tra t·∫•t c·∫£ c√°c tr∆∞·ªùng h·ª£p parsing
     */
    public String testComprehensiveParsing() {
        try {
            System.out.println("=== COMPREHENSIVE PARSING TEST ===");
            
            String[] testCases = {
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m cho tr·∫ª 12 tu·ªïi",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© Th√°i Lan", 
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© Trung Qu·ªëc",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m LEGO Technic",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m cho tr·∫ª 5 tu·ªïi xu·∫•t x·ª© ƒê·ª©c",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m LEGO City xu·∫•t x·ª© M·ªπ"
            };
            
            StringBuilder results = new StringBuilder();
            results.append("=== COMPREHENSIVE PARSING TEST RESULTS ===\n\n");
            
            for (String testInput : testCases) {
                System.out.println("---");
                System.out.println("Testing: " + testInput);
                
                SearchRequestDTO request = parseSearchRequestFromInput(testInput);
                System.out.println("Result: " + request);
                
                results.append("Input: ").append(testInput).append("\n");
                results.append("  - doTuoi: ").append(request.getDoTuoi()).append("\n");
                results.append("  - ten: ").append(request.getTen() != null ? request.getTen() : "null").append("\n");
                results.append("  - xuatXu: ").append(request.getXuatXu() != null ? request.getXuatXu() : "null").append("\n");
                results.append("  - thuongHieu: ").append(request.getThuongHieu() != null ? request.getThuongHieu() : "null").append("\n");
                results.append("\n");
            }
            
            return results.toString();
            
        } catch (Exception e) {
            System.err.println("Comprehensive test failed: " + e.getMessage());
            e.printStackTrace();
            return "‚ùå COMPREHENSIVE TEST FAILED: " + e.getMessage();
        }
    }

    /**
     * Test method ƒë·ªÉ ki·ªÉm tra fix cho xu·∫•t x·ª© Th√°i Lan
     */
    public String testFixThaiLan() {
        try {
            System.out.println("=== TESTING FIX FOR 'xu·∫•t x·ª© Th√°i Lan' ===");
            
            String userInput = "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© Th√°i Lan";
            System.out.println("User input: " + userInput);
            
            // Test parsing
            SearchRequestDTO request = parseSearchRequestFromInput(userInput);
            System.out.println("Parsed request: " + request);
            System.out.println("Parsed doTuoi: " + request.getDoTuoi());
            System.out.println("Parsed ten: " + request.getTen());
            System.out.println("Parsed xuatXu: " + request.getXuatXu());
            
            // Test search
            List<SanPham> products = searchWithRepository(request);
            System.out.println("Search results: " + products.size() + " products");
            
            if (!products.isEmpty()) {
                System.out.println("Sample products:");
                products.stream().limit(3).forEach(p -> 
                    System.out.println("  - " + p.getTenSanPham() + 
                        " | Origin: " + (p.getXuatXu() != null ? p.getXuatXu().getTen() : "NULL") + 
                        " | Status: " + p.getTrangThai()));
                
                return "‚úÖ FIX SUCCESSFUL! Found " + products.size() + " products from Thailand. " +
                       "Parsed xuatXu: " + request.getXuatXu() + ", ten: " + 
                       (request.getTen() != null ? request.getTen() : "null (correct)");
            } else {
                return "‚ùå FIX FAILED! No products found. Check database or query logic.";
            }
            
        } catch (Exception e) {
            System.err.println("Test failed: " + e.getMessage());
            e.printStackTrace();
            return "‚ùå TEST FAILED: " + e.getMessage();
        }
    }

    /**
     * Test method ƒë·ªÉ ki·ªÉm tra fix cho "tr·∫ª 12 tu·ªïi"
     */
    public String testFix12Tuoi() {
        try {
            System.out.println("=== TESTING FIX FOR 'tr·∫ª 12 tu·ªïi' ===");
            
            String userInput = "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m cho tr·∫ª 12 tu·ªïi";
            System.out.println("User input: " + userInput);
            
            // Test parsing
            SearchRequestDTO request = parseSearchRequestFromInput(userInput);
            System.out.println("Parsed request: " + request);
            System.out.println("Parsed doTuoi: " + request.getDoTuoi());
            System.out.println("Parsed ten: " + request.getTen());
            System.out.println("Parsed xuatXu: " + request.getXuatXu());
            
            // Test search
            List<SanPham> products = searchWithRepository(request);
            System.out.println("Search results: " + products.size() + " products");
            
            if (!products.isEmpty()) {
                System.out.println("Sample products:");
                products.stream().limit(3).forEach(p -> 
                    System.out.println("  - " + p.getTenSanPham() + 
                        " | Age: " + p.getDoTuoi() + 
                        " | Status: " + p.getTrangThai()));
                
                return "‚úÖ FIX SUCCESSFUL! Found " + products.size() + " products for age 12. " +
                       "Parsed doTuoi: " + request.getDoTuoi() + ", ten: " + 
                       (request.getTen() != null ? request.getTen() : "null (correct)");
            } else {
                return "‚ùå FIX FAILED! No products found. Check database or query logic.";
            }
            
        } catch (Exception e) {
            System.err.println("Test failed: " + e.getMessage());
            e.printStackTrace();
            return "‚ùå TEST FAILED: " + e.getMessage();
        }
    }

    /**
     * Test method ƒë·ªÉ ki·ªÉm tra search flow cho tr·∫ª 12 tu·ªïi
     */
    public void testSearchFlow12Tuoi() {
        try {
            System.out.println("DEBUG: Testing search flow for 12 tu·ªïi...");
            
            String userInput = "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m cho tr·∫ª 12 tu·ªïi";
            System.out.println("DEBUG: User input: " + userInput);
            
            // Test parsing
            SearchRequestDTO request = parseSearchRequestFromInput(userInput);
            System.out.println("DEBUG: Parsed request: " + request);
            
            // Test search
            List<SanPham> products = searchWithRepository(request);
            System.out.println("DEBUG: Search results: " + products.size() + " products");
            
            if (!products.isEmpty()) {
                System.out.println("DEBUG: Sample products:");
                products.forEach(p -> System.out.println("  - " + p.getTenSanPham() + 
                    " | Age: " + p.getDoTuoi() + 
                    " | Status: " + p.getTrangThai()));
            } else {
                System.out.println("DEBUG: No products found, checking database...");
                
                // Test direct query
                List<SanPham> allProducts = sanPhamRepo.findAll();
                System.out.println("DEBUG: Total products in database: " + allProducts.size());
                
                // Check products with age 12
                List<SanPham> age12Products = allProducts.stream()
                        .filter(p -> p.getDoTuoi() != null && p.getDoTuoi() <= 12)
                        .collect(Collectors.toList());
                System.out.println("DEBUG: Products with age <= 12: " + age12Products.size());
                
                if (!age12Products.isEmpty()) {
                    System.out.println("DEBUG: Sample age 12 products:");
                    age12Products.forEach(p -> System.out.println("  - " + p.getTenSanPham() + 
                        " | Age: " + p.getDoTuoi() + 
                        " | Status: " + p.getTrangThai()));
                }
            }
            
        } catch (Exception e) {
            System.err.println("DEBUG: Search flow test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Test method ƒë·ªÉ ki·ªÉm tra encoding fix
     */
    public void testEncodingFix() {
        try {
            System.out.println("DEBUG: Testing encoding fix...");
            
            // Test v·ªõi c√°c input kh√°c nhau
            String[] testInputs = {
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© t·ª´ nhat",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© t·ª´ Nh·∫≠t B·∫£n",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© t·ª´ m·ªπ",
                "T√¨m gi√∫p t√¥i s·∫£n ph·∫©m xu·∫•t x·ª© t·ª´ trung qu·ªëc"
            };
            
            for (String input : testInputs) {
                System.out.println("---");
                System.out.println("DEBUG: Testing input: " + input);
                
                // Test parsing
                SearchRequestDTO request = parseSearchRequestFromInput(input);
                System.out.println("DEBUG: Parsed origin: '" + request.getXuatXu() + "'");
                
                // Test search with native query
                List<SanPham> products = searchWithRepository(request);
                System.out.println("DEBUG: Search results: " + products.size() + " products");
                
                if (!products.isEmpty()) {
                    System.out.println("DEBUG: Sample product: " + products.get(0).getTenSanPham() + 
                        " | Origin: " + (products.get(0).getXuatXu() != null ? products.get(0).getXuatXu().getTen() : "NULL"));
                }
            }
            
        } catch (Exception e) {
            System.err.println("DEBUG: Encoding fix test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
    

    private String cleanJsonResponse(String jsonResponse) {
        String cleaned = jsonResponse.trim();
        if (cleaned.startsWith("```json")) {
            cleaned = cleaned.substring(7);
        }
        if (cleaned.startsWith("```")) {
            cleaned = cleaned.substring(3);
        }
        if (cleaned.endsWith("```")) {
            cleaned = cleaned.substring(0, cleaned.length() - 3);
        }
        return cleaned.trim();
    }

    private String preprocessJsonNumbers(String json) {
        try {
            JsonNode node = objectMapper.readTree(json);
            if (node.has("soLuongManhGhepMin") && node.get("soLuongManhGhepMin").isTextual()) {
                String value = node.get("soLuongManhGhepMin").asText();
                Integer numericValue = extractNumericValue(value);
                return json.replaceFirst(
                        "\"soLuongManhGhepMin\"\\s*:\\s*\"[^\"]*\"",
                        "\"soLuongManhGhepMin\": " + (numericValue != null ? numericValue : "null")
                );
            }
            return json;
        } catch (Exception e) {
            return json;
        }
    }

    private Integer extractNumericValue(String value) {
        if (value == null || value.trim().isEmpty()) {
            return null;
        }
        String numStr = value.replaceAll("[^0-9]", "");
        if (!numStr.isEmpty()) {
            try {
                return Integer.parseInt(numStr);
            } catch (NumberFormatException e) {
                return null;
            }
        }
        return null;
    }
    public SanPhamResponseDTO convertToResponseDTO(SanPham sanPham) {
        // OPTIMIZED: Batch load images ƒë·ªÉ tr√°nh N+1 queries
        List<AnhSp> listAnh = anhSpRepo.findBySanPhamId(sanPham.getId());
        List<AnhResponse> anhUrls = listAnh.stream()
                .map(anh -> {
                    AnhResponse response = new AnhResponse();
                    response.setId(anh.getId());
                    response.setUrl(anh.getUrl());
                    response.setAnhChinh(anh.getAnhChinh());
                    return response;
                })
                .toList();

        SanPhamResponseDTO dto = new SanPhamResponseDTO();
        dto.setId(sanPham.getId());
        dto.setTenSanPham(sanPham.getTenSanPham());
        dto.setMaSanPham(sanPham.getMaSanPham());
        dto.setDoTuoi(sanPham.getDoTuoi());
        dto.setMoTa(sanPham.getMoTa());
        dto.setGia(sanPham.getGia());
        dto.setSoLuongManhGhep(sanPham.getSoLuongManhGhep());
        dto.setSoLuongTon(sanPham.getSoLuongTon());
        dto.setSoLuongVote(sanPham.getSoLuongVote());
        dto.setDanhGiaTrungBinh(sanPham.getDanhGiaTrungBinh());
        dto.setDanhMucId(sanPham.getDanhMuc() != null ? sanPham.getDanhMuc().getId() : null);
        dto.setBoSuuTapId(sanPham.getBoSuuTap() != null ? sanPham.getBoSuuTap().getId() : null);
        dto.setXuatXuId(sanPham.getXuatXu() != null ? sanPham.getXuatXu().getId() : null);
        dto.setTrangThai(sanPham.getTrangThai());
        dto.setThuongHieuId(sanPham.getThuongHieu() != null ? sanPham.getThuongHieu().getId() : null);
        dto.setNoiBat(sanPham.getNoiBat() != null ? sanPham.getNoiBat() : null);
        dto.setAnhUrls(anhUrls);
        return dto;
    }
    
    /**
     * Batch convert products to DTOs - OPTIMIZED ƒë·ªÉ tr√°nh N+1 queries
     */
    public List<SanPhamResponseDTO> convertToResponseDTOs(List<SanPham> sanPhams) {
        if (sanPhams.isEmpty()) {
            return new ArrayList<>();
        }
        
        // Batch load t·∫•t c·∫£ images cho t·∫•t c·∫£ s·∫£n ph·∫©m
        List<Integer> sanPhamIds = sanPhams.stream()
                .map(SanPham::getId)
                .collect(Collectors.toList());
        
        List<AnhSp> allImages = anhSpRepo.findBySanPhamIdIn(sanPhamIds);
        Map<Integer, List<AnhSp>> imagesBySanPhamId = allImages.stream()
                .collect(Collectors.groupingBy(anhSp -> anhSp.getSanPham().getId()));
        
        // Convert to DTOs
        return sanPhams.stream()
                .map(sanPham -> {
                    List<AnhSp> productImages = imagesBySanPhamId.getOrDefault(sanPham.getId(), new ArrayList<>());
                    List<AnhResponse> anhUrls = productImages.stream()
                            .map(anh -> {
                                AnhResponse response = new AnhResponse();
                                response.setId(anh.getId());
                                response.setUrl(anh.getUrl());
                                response.setAnhChinh(anh.getAnhChinh());
                                return response;
                            })
                            .toList();

                    SanPhamResponseDTO dto = new SanPhamResponseDTO();
                    dto.setId(sanPham.getId());
                    dto.setTenSanPham(sanPham.getTenSanPham());
                    dto.setMaSanPham(sanPham.getMaSanPham());
                    dto.setDoTuoi(sanPham.getDoTuoi());
                    dto.setMoTa(sanPham.getMoTa());
                    dto.setGia(sanPham.getGia());
                    dto.setSoLuongManhGhep(sanPham.getSoLuongManhGhep());
                    dto.setSoLuongTon(sanPham.getSoLuongTon());
                    dto.setSoLuongVote(sanPham.getSoLuongVote());
                    dto.setDanhGiaTrungBinh(sanPham.getDanhGiaTrungBinh());
                    dto.setDanhMucId(sanPham.getDanhMuc() != null ? sanPham.getDanhMuc().getId() : null);
                    dto.setBoSuuTapId(sanPham.getBoSuuTap() != null ? sanPham.getBoSuuTap().getId() : null);
                    dto.setXuatXuId(sanPham.getXuatXu() != null ? sanPham.getXuatXu().getId() : null);
                    dto.setTrangThai(sanPham.getTrangThai());
                    dto.setThuongHieuId(sanPham.getThuongHieu() != null ? sanPham.getThuongHieu().getId() : null);
                    dto.setNoiBat(sanPham.getNoiBat() != null ? sanPham.getNoiBat() : null);
                    dto.setAnhUrls(anhUrls);
                    return dto;
                })
                .collect(Collectors.toList());
    }
}

