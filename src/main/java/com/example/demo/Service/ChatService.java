package com.example.demo.Service;

import com.example.demo.DTOs.IntentClassificationDTO;
import com.example.demo.DTOs.SearchRequestDTO;
import com.example.demo.Entity.AnhSp;
import com.example.demo.Entity.ChatMemory;
import com.example.demo.Entity.SanPham;
import com.example.demo.Repository.Anh_sp_Repo;
import com.example.demo.Repository.San_pham_Repo;
import com.example.demo.Responses.AnhResponse;
import com.example.demo.Responses.ChatResponse;
import com.example.demo.Responses.SanPhamResponseDTO;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.RequiredArgsConstructor;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.ollama.OllamaChatClient;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ChatService {
    private final OllamaChatClient chatClient;
    private final San_pham_Repo sanPhamRepo;
    private final ObjectMapper objectMapper;
    private final Anh_sp_Repo anhSpRepo;

    // Chat memory storage - s·ª≠ d·ª•ng ConcurrentHashMap ƒë·ªÉ thread-safe
    private final Map<String, List<ChatMemory>> userChatMemory = new ConcurrentHashMap<>();
    private static final int MAX_MEMORY_SIZE = 10; // Gi·ªõi h·∫°n 10 tin nh·∫Øn g·∫ßn nh·∫•t

    // FAQ knowledge base - c·∫£i thi·ªán v·ªõi th√¥ng tin chi ti·∫øt h∆°n
    private final Map<String, String> faqDatabase = Map.of(
            "SHIPPING", "üöö **Th√¥ng tin giao h√†ng:**\n‚Ä¢ N·ªôi th√†nh H√† N·ªôi, TP.HCM: 1-2 ng√†y l√†m vi·ªác\n‚Ä¢ Ngo·∫°i th√†nh: 3-5 ng√†y l√†m vi·ªác\n‚Ä¢ Mi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng t·ª´ 500,000ƒë\n‚Ä¢ Ph√≠ ship: 30,000ƒë cho ƒë∆°n d∆∞·ªõi 500,000ƒë",
            "WARRANTY", "üõ°Ô∏è **Ch√≠nh s√°ch b·∫£o h√†nh:**\n‚Ä¢ B·∫£o h√†nh 12 th√°ng l·ªói s·∫£n xu·∫•t\n‚Ä¢ ƒê·ªïi tr·∫£ mi·ªÖn ph√≠ trong 7 ng√†y ƒë·∫ßu\n‚Ä¢ S·∫£n ph·∫©m ph·∫£i c√≤n nguy√™n v·∫πn, ƒë·∫ßy ƒë·ªß ph·ª• ki·ªán\n‚Ä¢ H·ªó tr·ª£ b·∫£o h√†nh t·∫°i t·∫•t c·∫£ chi nh√°nh",
            "PAYMENT", "üí≥ **Ph∆∞∆°ng th·ª©c thanh to√°n:**\n‚Ä¢ Thanh to√°n khi nh·∫≠n h√†ng (COD)\n‚Ä¢ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n‚Ä¢ Th·∫ª t√≠n d·ª•ng/ghi n·ª£\n‚Ä¢ V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay, VNPay)\n‚Ä¢ Tr·∫£ g√≥p 0% l√£i su·∫•t (3-12 th√°ng)",
            "RETURN", "üîÑ **Ch√≠nh s√°ch ƒë·ªïi tr·∫£:**\n‚Ä¢ ƒê·ªïi tr·∫£ kh√¥ng l√Ω do trong 7 ng√†y\n‚Ä¢ S·∫£n ph·∫©m ph·∫£i nguy√™n v·∫πn, ch∆∞a s·ª≠ d·ª•ng\n‚Ä¢ C√≥ h√≥a ƒë∆°n mua h√†ng\n‚Ä¢ Mi·ªÖn ph√≠ ƒë·ªïi tr·∫£ n·∫øu l·ªói t·ª´ c·ª≠a h√†ng",
            "CONTACT", "üìû **Th√¥ng tin li√™n h·ªá:**\n‚Ä¢ Hotline: 1900-xxxx (8:00-22:00)\n‚Ä¢ Email: support@legoshop.vn\n‚Ä¢ Fanpage: facebook.com/legoshopvn\n‚Ä¢ Zalo: zalo.me/legoshop\n‚Ä¢ Chi nh√°nh: 123 ABC Street, H√† N·ªôi"
    );

    // Product categories for better advice
    private final Map<String, List<String>> productCategories = Map.of(
            "TECHNIC", List.of("LEGO TECHNIC", "MECHANICAL", "ENGINEERING"),
            "CITY", List.of("LEGO CITY", "POLICE", "FIRE", "CONSTRUCTION"),
            "CREATOR", List.of("LEGO CREATOR", "EXPERT", "ADVANCED"),
            "STAR_WARS", List.of("LEGO STAR WARS", "STAR WARS"),
            "FRIENDS", List.of("LEGO FRIENDS", "FRIENDS"),
            "DUPLO", List.of("LEGO DUPLO", "DUPLO"),
            "JUNIORS", List.of("LEGO JUNIORS", "JUNIORS")
    );

    /**
     * Main method x·ª≠ l√Ω input t·ª´ user v·ªõi memory context
     */
    public ChatResponse handleUserInput(String userInput, String sessionId) {
        try {
            // L·∫•y chat history ƒë·ªÉ c√≥ context
            List<ChatMemory> chatHistory = getChatHistory(sessionId);

            // Ph√¢n lo·∫°i intent v·ªõi context c·∫£i thi·ªán
            IntentClassificationDTO intent = classifyIntentWithContext(userInput, chatHistory);

            // X·ª≠ l√Ω theo intent
            ChatResponse response = processIntentRequest(intent, userInput, chatHistory);

            // L∆∞u v√†o memory
            saveChatMemory(sessionId, userInput, response.getMessage(), intent.getIntent());

            return response;

        } catch (Exception e) {
            ChatResponse errorResponse = new ChatResponse("ERROR",
                    "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.", null);
            saveChatMemory(sessionId, userInput, errorResponse.getMessage(), "ERROR");
            return errorResponse;
        }
    }

    /**
     * Ph√¢n lo·∫°i intent v·ªõi context t·ª´ chat history - C·∫¢I THI·ªÜN
     */
    private IntentClassificationDTO classifyIntentWithContext(String userInput, List<ChatMemory> chatHistory) {
        String contextInfo = buildContextFromHistory(chatHistory);

        String intentPrompt = String.format("""
            B·∫°n l√† AI chuy√™n ph√¢n t√≠ch √Ω ƒë·ªãnh kh√°ch h√†ng cho c·ª≠a h√†ng LEGO.
            
            **NG·ªÆ C·∫¢NH CU·ªòC TR√í CHUY·ªÜN:**
            %s
            
            **PH√ÇN T√çCH C√ÇU:** "%s"
            
            **QUY T·∫ÆC PH√ÇN LO·∫†I (CH·ªåN 1 INTENT DUY NH·∫§T):**
            1. SEARCH: T√¨m ki·∫øm s·∫£n ph·∫©m c·ª• th·ªÉ (t√™n, lo·∫°i, gi√°, th∆∞∆°ng hi·ªáu)
            2. ADVICE: T∆∞ v·∫•n, g·ª£i √Ω, h·ªèi √Ω ki·∫øn v·ªÅ s·∫£n ph·∫©m (∆∞u ti√™n cho "t∆∞ v·∫•n", "b√°n ch·∫°y", "ph·ªï bi·∫øn")
            3. SHIPPING: Giao h√†ng, v·∫≠n chuy·ªÉn, th·ªùi gian ship
            4. FAQ: B·∫£o h√†nh, thanh to√°n, ƒë·ªïi tr·∫£, li√™n h·ªá
            5. FOLLOW_UP: C√¢u h·ªèi ti·∫øp theo v·ªÅ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc
            6. GENERAL: Ch√†o h·ªèi, c·∫£m ∆°n, c√¢u h·ªèi chung
            
            **L∆ØU √ù:** Ch·ªâ tr·∫£ v·ªÅ 1 intent duy nh·∫•t, kh√¥ng d√πng d·∫•u |
            
            **TR·∫¢ V·ªÄ JSON:**
            {
              "intent": "SEARCH|ADVICE|SHIPPING|FAQ|FOLLOW_UP|GENERAL",
              "confidence": "HIGH|MEDIUM|LOW",
              "extractedInfo": "th√¥ng tin quan tr·ªçng t·ª´ c√¢u"
            }
            """, contextInfo, userInput);

        return executeIntentClassification(intentPrompt);
    }

    /**
     * X·ª≠ l√Ω request theo intent - C·∫¢I THI·ªÜN
     */
    private ChatResponse processIntentRequest(IntentClassificationDTO intent, String userInput, List<ChatMemory> chatHistory) {
        System.out.println("DEBUG: Processing intent: " + intent.getIntent() + " for input: " + userInput);
        
        return switch (intent.getIntent().toUpperCase()) {
            case "SEARCH" -> {
                System.out.println("DEBUG: Routing to SEARCH handler");
                yield handleProductSearch(userInput, chatHistory);
            }
            case "ADVICE" -> {
                System.out.println("DEBUG: Routing to ADVICE handler");
                yield handleAdviceRequest(userInput, chatHistory);
            }
            case "SHIPPING" -> {
                System.out.println("DEBUG: Routing to SHIPPING handler");
                yield handleShippingQuery(userInput);
            }
            case "FAQ" -> {
                System.out.println("DEBUG: Routing to FAQ handler");
                yield handleFAQQuery(userInput, intent.getExtractedInfo());
            }
            case "FOLLOW_UP" -> {
                System.out.println("DEBUG: Routing to FOLLOW_UP handler");
                yield handleFollowUpQuestion(userInput, chatHistory);
            }
            case "GENERAL" -> {
                System.out.println("DEBUG: Routing to GENERAL handler");
                yield handleGeneralChat(userInput, chatHistory);
            }
            default -> {
                System.out.println("DEBUG: Routing to default GENERAL handler");
                yield handleGeneralChat(userInput, chatHistory);
            }
        };
    }

    /**
     * X·ª≠ l√Ω t√¨m ki·∫øm s·∫£n ph·∫©m - C·∫¢I THI·ªÜN
     */
    private ChatResponse handleProductSearch(String userInput, List<ChatMemory> chatHistory) {
        try {
            // T√¨m ki·∫øm v·ªõi context
            List<SanPham> products = searchProductsWithContext(userInput, chatHistory);

            if (products.isEmpty()) {
                // Fallback: t√¨m ki·∫øm r·ªông h∆°n
                products = searchProductsFallback(userInput);
                
                if (products.isEmpty()) {
                    return new ChatResponse("SEARCH",
                            "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. " +
                            "B·∫°n c√≥ th·ªÉ:\n‚Ä¢ Th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c\n‚Ä¢ Cho t√¥i bi·∫øt th√™m th√¥ng tin (ƒë·ªô tu·ªïi, ng√¢n s√°ch, s·ªü th√≠ch)\n‚Ä¢ Li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp", null);
                }
            }

            // Convert to DTO
            List<SanPhamResponseDTO> productDTOs = products.stream()
                    .map(this::convertToResponseDTO)
                    .collect(Collectors.toList());

            String message = generateSearchResponse(userInput, products, chatHistory);
            return new ChatResponse("SEARCH", message, productDTOs);

        } catch (Exception e) {
            return new ChatResponse("ERROR", "L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.", null);
        }
    }

    /**
     * X·ª≠ l√Ω t∆∞ v·∫•n v·ªõi context - C·∫¢I THI·ªÜN M·∫†NH M·∫º
     */
    private ChatResponse handleAdviceRequest(String userInput, List<ChatMemory> chatHistory) {
        try {
            System.out.println("DEBUG: Entering handleAdviceRequest with: " + userInput);
            String lowerInput = userInput.toLowerCase();
            System.out.println("DEBUG: Lower input: " + lowerInput);
            
            // Ki·ªÉm tra n·∫øu y√™u c·∫ßu v·ªÅ s·∫£n ph·∫©m b√°n ch·∫°y
            if (lowerInput.contains("b√°n ch·∫°y") || lowerInput.contains("ph·ªï bi·∫øn") || 
                lowerInput.contains("n·ªïi ti·∫øng") || lowerInput.contains("hot") ||
                lowerInput.contains("best") || lowerInput.contains("top") ||
                lowerInput.contains("nh·∫•t")) {
                
                System.out.println("DEBUG: Detected best-selling request, processing...");
                
                try {
                    List<SanPham> bestSellingProducts = findBestSellingProducts();
                    System.out.println("Found " + bestSellingProducts.size() + " best selling products");
                    
                    if (bestSellingProducts.isEmpty()) {
                        // Fallback: l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
                        bestSellingProducts = sanPhamRepo.findAll().stream()
                                .limit(10)
                                .collect(Collectors.toList());
                        System.out.println("Fallback: Found " + bestSellingProducts.size() + " products");
                    }
                    
                    // Convert to DTO
                    List<SanPhamResponseDTO> bestSellingDTOs = bestSellingProducts.stream()
                            .map(this::convertToResponseDTO)
                            .collect(Collectors.toList());
                    
                    String adviceMessage = generateBestSellingAdvice(userInput, bestSellingProducts);
                    return new ChatResponse("ADVICE", adviceMessage, bestSellingDTOs);
                    
                } catch (Exception e) {
                    System.err.println("Error finding best selling products: " + e.getMessage());
                    // Fallback: l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
                    List<SanPham> allProducts = sanPhamRepo.findAll().stream()
                            .limit(10)
                            .collect(Collectors.toList());
                    
                    // Convert to DTO
                    List<SanPhamResponseDTO> allProductDTOs = allProducts.stream()
                            .map(this::convertToResponseDTO)
                            .collect(Collectors.toList());
                    
                    String fallbackMessage = "üî• **TOP S·∫¢N PH·∫®M LEGO PH·ªî BI·∫æN** üî•\n\n" +
                            "D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n, ƒë√¢y l√† nh·ªØng s·∫£n ph·∫©m LEGO ƒë∆∞·ª£c nhi·ªÅu kh√°ch h√†ng y√™u th√≠ch:\n\n" +
                            formatProductsForAdvice(allProducts) + "\n\n" +
                            "üí° **L·ªùi khuy√™n:** Nh·ªØng s·∫£n ph·∫©m n√†y ƒë·ªÅu c√≥ ch·∫•t l∆∞·ª£ng cao v√† ph√π h·ª£p v·ªõi nhi·ªÅu ƒë·ªô tu·ªïi. " +
                            "B·∫°n c√≥ th·ªÉ ch·ªçn theo s·ªü th√≠ch ho·∫∑c li√™n h·ªá t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n!";
                    
                    return new ChatResponse("ADVICE", fallbackMessage, allProductDTOs);
                }
            }
            
            // Ph√¢n t√≠ch nhu c·∫ßu ng∆∞·ªùi d√πng cho c√°c tr∆∞·ªùng h·ª£p kh√°c
            UserNeeds userNeeds = analyzeUserNeeds(userInput, chatHistory);
            
            // T√¨m s·∫£n ph·∫©m ph√π h·ª£p
            List<SanPham> recommendedProducts = findProductsByNeeds(userNeeds);
            
            // Convert to DTO
            List<SanPhamResponseDTO> recommendedDTOs = recommendedProducts.stream()
                    .map(this::convertToResponseDTO)
                    .collect(Collectors.toList());
            
            // T·∫°o l·ªùi t∆∞ v·∫•n th√¥ng minh
            String adviceMessage = generateIntelligentAdvice(userInput, recommendedProducts, userNeeds, chatHistory);
            
            return new ChatResponse("ADVICE", adviceMessage, recommendedDTOs);

        } catch (Exception e) {
            System.err.println("Error in handleAdviceRequest: " + e.getMessage());
            e.printStackTrace();
            return new ChatResponse("ADVICE",
                    "ƒê·ªÉ t∆∞ v·∫•n t·ªët nh·∫•t, b·∫°n vui l√≤ng cho bi·∫øt:\n" +
                    "‚Ä¢ ƒê·ªô tu·ªïi ng∆∞·ªùi ch∆°i\n" +
                    "‚Ä¢ S·ªü th√≠ch (xe h∆°i, robot, th√†nh ph·ªë, v.v.)\n" +
                    "‚Ä¢ Ng√¢n s√°ch d·ª± ki·∫øn\n" +
                    "‚Ä¢ Kinh nghi·ªám ch∆°i LEGO\n\n" +
                    "Ho·∫∑c li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp!", null);
        }
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi follow-up - C·∫¢I THI·ªÜN
     */
    private ChatResponse handleFollowUpQuestion(String userInput, List<ChatMemory> chatHistory) {
        try {
            // L·∫•y context t·ª´ c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
            String contextInfo = buildContextFromHistory(chatHistory);
            
            // Ph√¢n t√≠ch follow-up question
            FollowUpAnalysis analysis = analyzeFollowUpQuestion(userInput, chatHistory);

            String followUpPrompt = String.format("""
                B·∫°n l√† chuy√™n gia t∆∞ v·∫•n LEGO th√¢n thi·ªán v√† chuy√™n nghi·ªáp.
                
                **NG·ªÆ C·∫¢NH CU·ªòC TR√í CHUY·ªÜN:**
                %s
                
                **C√ÇU H·ªéI FOLLOW-UP:** "%s"
                
                **PH√ÇN T√çCH:** %s
                
                H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† h·ªØu √≠ch.
                N·∫øu c·∫ßn t√¨m ki·∫øm s·∫£n ph·∫©m, h√£y ƒë·ªÅ xu·∫•t c·ª• th·ªÉ.
                Tr·∫£ l·ªùi ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.
                """, contextInfo, userInput, analysis.getAnalysis());

            Prompt prompt = new Prompt(followUpPrompt);
            String response = chatClient.call(prompt).getResult().getOutput().getContent();

            // Convert products to DTO
            List<SanPhamResponseDTO> productDTOs = analysis.getProducts().stream()
                    .map(this::convertToResponseDTO)
                    .collect(Collectors.toList());

            return new ChatResponse("FOLLOW_UP", response.trim(), productDTOs);

        } catch (Exception e) {
            return new ChatResponse("FOLLOW_UP",
                    "T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi th√™m v·ªÅ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc. " +
                    "B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë·ªÉ t√¥i h·ªó tr·ª£ t·ªët h∆°n kh√¥ng?", null);
        }
    }

    /**
     * X·ª≠ l√Ω shipping query - C·∫¢I THI·ªÜN
     */
    private ChatResponse handleShippingQuery(String userInput) {
        String shippingInfo = faqDatabase.get("SHIPPING");
        String lowerInput = userInput.toLowerCase();

        if (lowerInput.contains("mi·ªÖn ph√≠") || lowerInput.contains("free")) {
            shippingInfo += "\n\nüí° **L∆∞u √Ω:** √Åp d·ª•ng mi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng t·ª´ 500,000ƒë tr·ªü l√™n!";
        }
        
        if (lowerInput.contains("th·ªùi gian") || lowerInput.contains("bao l√¢u")) {
            shippingInfo += "\n\n‚è∞ **Th·ªùi gian giao h√†ng:**\n‚Ä¢ Giao trong ng√†y: ƒê·∫∑t tr∆∞·ªõc 14:00\n‚Ä¢ Giao nhanh: +50,000ƒë (giao trong 2-4 gi·ªù)";
        }

        return new ChatResponse("SHIPPING", shippingInfo, null);
    }

    /**
     * X·ª≠ l√Ω FAQ query - C·∫¢I THI·ªÜN
     */
    private ChatResponse handleFAQQuery(String userInput, String extractedInfo) {
        String lowerInput = userInput.toLowerCase();

        String response = determineFAQResponse(lowerInput);
        return new ChatResponse("FAQ", response, null);
    }

    /**
     * X·ª≠ l√Ω chat chung v·ªõi context - C·∫¢I THI·ªÜN
     */
    private ChatResponse handleGeneralChat(String userInput, List<ChatMemory> chatHistory) {
        String contextInfo = buildContextFromHistory(chatHistory);

        String generalPrompt = String.format("""
            B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n th√¢n thi·ªán v√† chuy√™n nghi·ªáp c·ªßa c·ª≠a h√†ng LEGO.
            
            **NG·ªÆ C·∫¢NH:** %s
            
            **C√ÇU KH√ÅCH H√ÄNG:** "%s"
            
            H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† h·ªØu √≠ch.
            N·∫øu c√≥ th·ªÉ, h√£y h∆∞·ªõng d·∫´n kh√°ch h√†ng ƒë·∫øn c√°c d·ªãch v·ª• ph√π h·ª£p.
            Tr·∫£ l·ªùi ng·∫Øn g·ªçn (50-100 t·ª´) nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.
            S·ª≠ d·ª•ng emoji ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán.
            """, contextInfo, userInput);

        try {
            Prompt prompt = new Prompt(generalPrompt);
            String response = chatClient.call(prompt).getResult().getOutput().getContent();
            return new ChatResponse("GENERAL", response.trim(), null);
        } catch (Exception e) {
            return new ChatResponse("GENERAL",
                    "üëã Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n" +
                    "üîç T√¨m ki·∫øm s·∫£n ph·∫©m LEGO\n" +
                    "üí° T∆∞ v·∫•n mua h√†ng\n" +
                    "üöö Th√¥ng tin giao h√†ng\n" +
                    "üõ°Ô∏è Ch√≠nh s√°ch b·∫£o h√†nh\n\n" +
                    "B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ ·∫°?", null);
        }
    }

    /**
     * Memory Management Methods
     */
    private List<ChatMemory> getChatHistory(String sessionId) {
        return userChatMemory.getOrDefault(sessionId, new ArrayList<>());
    }

    private void saveChatMemory(String sessionId, String userInput, String botResponse, String intent) {
        List<ChatMemory> history = userChatMemory.computeIfAbsent(sessionId, k -> new ArrayList<>());

        history.add(new ChatMemory(userInput, botResponse, intent));

        // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc memory
        if (history.size() > MAX_MEMORY_SIZE) {
            history.remove(0); // X√≥a tin nh·∫Øn c≈© nh·∫•t
        }
    }

    private String buildContextFromHistory(List<ChatMemory> chatHistory) {
        if (chatHistory.isEmpty()) {
            return "ƒê√¢y l√† ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán.";
        }

        return chatHistory.stream()
                .limit(5) // Ch·ªâ l·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t
                .map(memory -> String.format("User: %s | Bot: %s",
                        memory.getUserInput(),
                        memory.getBotResponse().substring(0, Math.min(100, memory.getBotResponse().length()))))
                .collect(Collectors.joining("\n"));
    }

    public void clearChatMemory(String sessionId) {
        userChatMemory.remove(sessionId);
    }

    public int getChatMemorySize(String sessionId) {
        return userChatMemory.getOrDefault(sessionId, new ArrayList<>()).size();
    }

    /**
     * Helper Methods - C·∫¢I THI·ªÜN
     */
    private IntentClassificationDTO executeIntentClassification(String intentPrompt) {
        try {
            Prompt prompt = new Prompt(intentPrompt);
            String jsonResponse = chatClient.call(prompt).getResult().getOutput().getContent();
            String cleanJson = cleanJsonResponse(jsonResponse);
            
            System.out.println("DEBUG: AI Response: " + jsonResponse);
            System.out.println("DEBUG: Cleaned JSON: " + cleanJson);
            
            IntentClassificationDTO result = objectMapper.readValue(cleanJson, IntentClassificationDTO.class);
            System.out.println("DEBUG: Parsed Intent: " + result.getIntent() + ", Confidence: " + result.getConfidence());
            
            // Fix: Handle multiple intents separated by |
            String intent = result.getIntent();
            if (intent != null && intent.contains("|")) {
                String[] intents = intent.split("\\|");
                // Prioritize ADVICE over SEARCH
                if (intents.length > 0) {
                    for (String singleIntent : intents) {
                        if ("ADVICE".equalsIgnoreCase(singleIntent.trim())) {
                            intent = "ADVICE";
                            break;
                        }
                    }
                    // If no ADVICE found, take the first one
                    if (intent.contains("|")) {
                        intent = intents[0].trim();
                    }
                }
                result.setIntent(intent);
                System.out.println("DEBUG: Fixed Intent: " + intent);
            }
            
            return result;
        } catch (Exception e) {
            System.err.println("DEBUG: Error in AI classification: " + e.getMessage());
            // Fallback logic c·∫£i thi·ªán
            IntentClassificationDTO fallback = new IntentClassificationDTO();
            fallback.setIntent(determineIntentFallback(intentPrompt));
            fallback.setConfidence("LOW");
            System.out.println("DEBUG: Using fallback intent: " + fallback.getIntent());
            return fallback;
        }
    }

    private String determineIntentFallback(String userInput) {
        String lowerInput = userInput.toLowerCase();
        
        System.out.println("DEBUG: Analyzing intent for: " + userInput);
        System.out.println("DEBUG: Lower input: " + lowerInput);
        
        // ADVICE - ∆∞u ti√™n cao nh·∫•t cho t∆∞ v·∫•n
        if (lowerInput.contains("t∆∞ v·∫•n") || lowerInput.contains("g·ª£i √Ω") || lowerInput.contains("khuy√™n") ||
            lowerInput.contains("b√°n ch·∫°y") || lowerInput.contains("ph·ªï bi·∫øn") || lowerInput.contains("n·ªïi ti·∫øng") ||
            lowerInput.contains("ƒë·ªÅ xu·∫•t") || lowerInput.contains("gi·ªõi thi·ªáu") || lowerInput.contains("cho t√¥i") ||
            lowerInput.contains("nh·∫•t")) {
            System.out.println("DEBUG: Detected ADVICE intent");
            return "ADVICE";
        }
        
        // SEARCH - t√¨m ki·∫øm s·∫£n ph·∫©m c·ª• th·ªÉ
        if (lowerInput.contains("t√¨m") || lowerInput.contains("mua") || lowerInput.contains("c√≥") || 
            lowerInput.contains("lego") || lowerInput.contains("xe") || lowerInput.contains("robot") ||
            lowerInput.contains("s·∫£n ph·∫©m") || lowerInput.contains("ƒë·ªì ch∆°i")) {
            System.out.println("DEBUG: Detected SEARCH intent");
            return "SEARCH";
        }
        
        // SHIPPING - giao h√†ng
        if (lowerInput.contains("giao") || lowerInput.contains("ship") || lowerInput.contains("v·∫≠n chuy·ªÉn") ||
            lowerInput.contains("th·ªùi gian") || lowerInput.contains("bao l√¢u") || lowerInput.contains("mi·ªÖn ph√≠")) {
            System.out.println("DEBUG: Detected SHIPPING intent");
            return "SHIPPING";
        }
        
        // FAQ - c√¢u h·ªèi th∆∞·ªùng g·∫∑p
        if (lowerInput.contains("b·∫£o h√†nh") || lowerInput.contains("thanh to√°n") || lowerInput.contains("ƒë·ªïi tr·∫£") ||
            lowerInput.contains("li√™n h·ªá") || lowerInput.contains("hotline") || lowerInput.contains("ch√≠nh s√°ch")) {
            System.out.println("DEBUG: Detected FAQ intent");
            return "FAQ";
        }
        
        System.out.println("DEBUG: Defaulting to GENERAL intent");
        return "GENERAL";
    }

    private List<SanPham> searchProductsWithContext(String userInput, List<ChatMemory> chatHistory) {
        String contextInfo = buildContextFromHistory(chatHistory);
        
        String searchPrompt = String.format("""
            B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√¨m ki·∫øm LEGO.
            
            **NG·ªÆ C·∫¢NH:** %s
            **C√ÇU T√åM KI·∫æM:** "%s"
            
            Tr·∫£ v·ªÅ JSON v·ªõi th√¥ng tin t√¨m ki·∫øm:
            {
              "ten": "t√™n s·∫£n ph·∫©m c·ª• th·ªÉ",
              "gia": null,
              "doTuoi": "ƒë·ªô tu·ªïi",
              "xuatXu": null,
              "thuongHieu": "th∆∞∆°ng hi·ªáu LEGO",
              "boSuuTap": "b·ªô s∆∞u t·∫≠p",
              "soLuongManhGhepMin": null,
              "danhGiaToiThieu": null
            }
            
            Ch·ªâ ƒëi·ªÅn th√¥ng tin ch·∫Øc ch·∫Øn, ƒë·ªÉ null n·∫øu kh√¥ng r√µ.
            """, contextInfo, userInput);

        try {
            Prompt prompt = new Prompt(searchPrompt);
            String jsonResponse = chatClient.call(prompt).getResult().getOutput().getContent();
            String cleanJson = cleanJsonResponse(jsonResponse);
            String processedJson = preprocessJsonNumbers(cleanJson);
            SearchRequestDTO request = objectMapper.readValue(processedJson, SearchRequestDTO.class);
            return sanPhamRepo.timKiemTheoDieuKien(request);
        } catch (Exception e) {
            throw new RuntimeException("L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m: " + e.getMessage(), e);
        }
    }

    private List<SanPham> searchProductsFallback(String userInput) {
        // Fallback: t√¨m ki·∫øm theo t·ª´ kh√≥a ƒë∆°n gi·∫£n
        try {
            String[] keywords = userInput.toLowerCase().split("\\s+");
            List<SanPham> allProducts = sanPhamRepo.findAll();
            
            return allProducts.stream()
                    .filter(product -> {
                        String productName = product.getTenSanPham() != null ? 
                            product.getTenSanPham().toLowerCase() : "";
                        return keywords.length > 0 && 
                               keywords[0].length() > 2 && 
                               productName.contains(keywords[0]);
                    })
                    .limit(10)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            return new ArrayList<>();
        }
    }

    private String generateSearchResponse(String userInput, List<SanPham> products, List<ChatMemory> chatHistory) {
        if (products.size() == 1) {
            SanPham product = products.get(0);
            return String.format("üéØ T√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p:\n\n" +
                    "**%s**\n" +
                    "üí∞ Gi√°: %s\n" +
                    "üë∂ ƒê·ªô tu·ªïi: %s\n" +
                    "üè∑Ô∏è Th∆∞∆°ng hi·ªáu: %s\n\n" +
                    "B·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n th√™m v·ªÅ s·∫£n ph·∫©m n√†y kh√¥ng?",
                    product.getTenSanPham(),
                    product.getGia() != null ? String.format("%,.0f ƒë", product.getGia()) : "N/A",
                    product.getDoTuoi(),
                    product.getThuongHieu());
        } else {
            return String.format("üîç T√¨m th·∫•y %d s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n:\n\n" +
                    "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m th√¥ng tin ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ h∆°n kh√¥ng?", products.size());
        }
    }

    // Inner classes for better organization
    private static class UserNeeds {
        private String ageGroup;
        private String interests;
        private BigDecimal budget;
        private String experience;
        private String category;
        
        // Getters and setters
        public String getAgeGroup() { return ageGroup; }
        public void setAgeGroup(String ageGroup) { this.ageGroup = ageGroup; }
        public String getInterests() { return interests; }
        public void setInterests(String interests) { this.interests = interests; }
        public BigDecimal getBudget() { return budget; }
        public void setBudget(BigDecimal budget) { this.budget = budget; }
        public String getExperience() { return experience; }
        public void setExperience(String experience) { this.experience = experience; }
        public String getCategory() { return category; }
        public void setCategory(String category) { this.category = category; }
    }

    private static class FollowUpAnalysis {
        private String analysis;
        private List<SanPham> products;
        
        public FollowUpAnalysis(String analysis, List<SanPham> products) {
            this.analysis = analysis;
            this.products = products;
        }
        
        public String getAnalysis() { return analysis; }
        public List<SanPham> getProducts() { return products; }
    }

    private UserNeeds analyzeUserNeeds(String userInput, List<ChatMemory> chatHistory) {
        String contextInfo = buildContextFromHistory(chatHistory);
        
        String analysisPrompt = String.format("""
            Ph√¢n t√≠ch nhu c·∫ßu ng∆∞·ªùi d√πng t·ª´ c√¢u t∆∞ v·∫•n v√† ng·ªØ c·∫£nh.
            
            **NG·ªÆ C·∫¢NH:** %s
            **C√ÇU T∆Ø V·∫§N:** "%s"
            
            Tr·∫£ v·ªÅ JSON:
            {
              "ageGroup": "ƒë·ªô tu·ªïi (tr·∫ª em/thanh thi·∫øu ni√™n/ng∆∞·ªùi l·ªõn)",
              "interests": "s·ªü th√≠ch (xe h∆°i/robot/th√†nh ph·ªë/v.v.)",
              "budget": null,
              "experience": "kinh nghi·ªám (m·ªõi b·∫Øt ƒë·∫ßu/trung b√¨nh/n√¢ng cao)",
              "category": "danh m·ª•c LEGO ph√π h·ª£p"
            }
            """, contextInfo, userInput);

        try {
            Prompt prompt = new Prompt(analysisPrompt);
            String jsonResponse = chatClient.call(prompt).getResult().getOutput().getContent();
            String cleanJson = cleanJsonResponse(jsonResponse);
            return objectMapper.readValue(cleanJson, UserNeeds.class);
        } catch (Exception e) {
            UserNeeds needs = new UserNeeds();
            needs.setAgeGroup("tr·∫ª em");
            needs.setExperience("m·ªõi b·∫Øt ƒë·∫ßu");
            return needs;
        }
    }

    private List<SanPham> findProductsByNeeds(UserNeeds needs) {
        try {
            SearchRequestDTO criteria = new SearchRequestDTO();
            
            // Set criteria based on needs
            if (needs.getAgeGroup() != null) {
                criteria.setDoTuoi(extractAgeFromGroup(needs.getAgeGroup()));
            }
            if (needs.getCategory() != null) {
                criteria.setThuongHieu(needs.getCategory());
            }
            
            List<SanPham> products = sanPhamRepo.timKiemTheoDieuKien(criteria);
            
            // If no products found, try alternative search
            if (products.isEmpty()) {
                products = findAlternativeProducts(criteria);
            }
            
            return products.stream().limit(6).collect(Collectors.toList());
            
        } catch (Exception e) {
            return findAlternativeProducts(new SearchRequestDTO());
        }
    }

    /**
     * T√¨m s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
     */
    private List<SanPham> findBestSellingProducts() {
        try {
            // Th·ª≠ l·∫•y d·ªØ li·ªáu b√°n ch·∫°y t·ª´ 6 th√°ng g·∫ßn nh·∫•t (r·ªông h∆°n)
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusMonths(6);
            
            System.out.println("Searching for best selling products from " + startDate + " to " + endDate);
            
            List<Object[]> results = sanPhamRepo.findTopDaBan(startDate, endDate);
            System.out.println("Found " + results.size() + " results from database");
            
            if (results.isEmpty()) {
                System.out.println("No best selling data found, using fallback");
                return getFallbackProducts();
            }
            
            List<String> tenSP = results.stream()
                    .map(r -> (String) r[1])
                    .limit(10) // L·∫•y top 10 s·∫£n ph·∫©m b√°n ch·∫°y
                    .toList();
            
            System.out.println("Product names: " + tenSP);
            
            List<SanPham> products = tenSP.stream()
                    .map(sanPhamRepo::findByTenSanPham)
                    .filter(product -> product != null)
                    .collect(Collectors.toList());
            
            System.out.println("Found " + products.size() + " valid products");
            
            // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o, d√πng fallback
            if (products.isEmpty()) {
                System.out.println("No valid products found, using fallback");
                return getFallbackProducts();
            }
            
            return products;
                    
        } catch (Exception e) {
            System.err.println("Error in findBestSellingProducts: " + e.getMessage());
            e.printStackTrace();
            return getFallbackProducts();
        }
    }
    
    /**
     * Fallback: l·∫•y s·∫£n ph·∫©m ph·ªï bi·∫øn
     */
    private List<SanPham> getFallbackProducts() {
        try {
            // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v√† s·∫Øp x·∫øp theo gi√° tr·ªã ph·ªï bi·∫øn
            List<SanPham> allProducts = sanPhamRepo.findAll();
            
            // S·∫Øp x·∫øp theo ƒë√°nh gi√° trung b√¨nh v√† s·ªë l∆∞·ª£ng vote
            List<SanPham> sortedProducts = allProducts.stream()
                    .filter(p -> p.getDanhGiaTrungBinh() != null && p.getDanhGiaTrungBinh() > 0)
                    .sorted((p1, p2) -> {
                        // ∆Øu ti√™n ƒë√°nh gi√° cao v√† nhi·ªÅu vote
                        double score1 = p1.getDanhGiaTrungBinh() * (p1.getSoLuongVote() != null ? p1.getSoLuongVote() : 1);
                        double score2 = p2.getDanhGiaTrungBinh() * (p2.getSoLuongVote() != null ? p2.getSoLuongVote() : 1);
                        return Double.compare(score2, score1); // Gi·∫£m d·∫ßn
                    })
                    .limit(10)
                    .collect(Collectors.toList());
            
            // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m c√≥ ƒë√°nh gi√°, l·∫•y 10 s·∫£n ph·∫©m ƒë·∫ßu ti√™n
            if (sortedProducts.isEmpty()) {
                sortedProducts = allProducts.stream()
                        .limit(10)
                        .collect(Collectors.toList());
            }
            
            System.out.println("Fallback: Found " + sortedProducts.size() + " products");
            return sortedProducts;
            
        } catch (Exception e) {
            System.err.println("Error in getFallbackProducts: " + e.getMessage());
            return new ArrayList<>();
        }
    }

    private String extractAgeFromGroup(String ageGroup) {
        if (ageGroup.contains("tr·∫ª em") || ageGroup.contains("nh·ªè")) {
            return "4-6";
        } else if (ageGroup.contains("thi·∫øu ni√™n")) {
            return "7-12";
        } else if (ageGroup.contains("ng∆∞·ªùi l·ªõn")) {
            return "18+";
        }
        return "6+";
    }

    private String generateIntelligentAdvice(String userInput, List<SanPham> products, UserNeeds needs, List<ChatMemory> chatHistory) {
        if (products.isEmpty()) {
            return "D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n, t√¥i khuy√™n b·∫°n n√™n xem x√©t c√°c b·ªô LEGO c∆° b·∫£n ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi. " +
                    "Vui l√≤ng cho bi·∫øt th√™m th√¥ng tin ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ h∆°n!";
        }

        String contextInfo = buildContextFromHistory(chatHistory);

        String advicePrompt = String.format("""
            B·∫°n l√† chuy√™n gia t∆∞ v·∫•n LEGO chuy√™n nghi·ªáp.
            
            **NG·ªÆ C·∫¢NH:** %s
            **Y√äU C·∫¶U:** "%s"
            **PH√ÇN T√çCH NHU C·∫¶U:** %s
            **S·∫¢N PH·∫®M G·ª¢I √ù:** %s
            
            H√£y vi·∫øt l·ªùi t∆∞ v·∫•n chuy√™n nghi·ªáp, th√¢n thi·ªán (150-200 t·ª´):
            - Gi·∫£i th√≠ch t·∫°i sao ch·ªçn nh·ªØng s·∫£n ph·∫©m n√†y
            - ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ
            - H∆∞·ªõng d·∫´n c√°ch ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p
            - S·ª≠ d·ª•ng emoji ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán
            """, contextInfo, userInput, formatUserNeeds(needs), formatProductsForAdvice(products));

        try {
            Prompt prompt = new Prompt(advicePrompt);
            return chatClient.call(prompt).getResult().getOutput().getContent().trim();
        } catch (Exception e) {
            return String.format("üí° D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n, t√¥i g·ª£i √Ω %d s·∫£n ph·∫©m LEGO ph√π h·ª£p ƒë∆∞·ª£c ch·ªçn l·ªçc k·ªπ c√†ng. " +
                    "Nh·ªØng s·∫£n ph·∫©m n√†y ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi v√† s·ªü th√≠ch c·ªßa b·∫°n.", products.size());
        }
    }

    private String generateBestSellingAdvice(String userInput, List<SanPham> products) {
        if (products.isEmpty()) {
            return "üî• Hi·ªán t·∫°i ch∆∞a c√≥ d·ªØ li·ªáu v·ªÅ s·∫£n ph·∫©m b√°n ch·∫°y. T√¥i s·∫Ω t∆∞ v·∫•n cho b·∫°n m·ªôt s·ªë s·∫£n ph·∫©m LEGO ph·ªï bi·∫øn!";
        }

        try {
            String advicePrompt = String.format("""
                B·∫°n l√† chuy√™n gia t∆∞ v·∫•n LEGO chuy√™n nghi·ªáp.
                
                **Y√äU C·∫¶U KH√ÅCH H√ÄNG:** "%s"
                **S·∫¢N PH·∫®M B√ÅN CH·∫†Y:** %s
                
                H√£y vi·∫øt l·ªùi t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m b√°n ch·∫°y (150-200 t·ª´):
                - Gi·∫£i th√≠ch t·∫°i sao nh·ªØng s·∫£n ph·∫©m n√†y b√°n ch·∫°y
                - ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ cho t·ª´ng s·∫£n ph·∫©m
                - Nh·∫•n m·∫°nh ∆∞u ƒëi·ªÉm v√† ph√π h·ª£p v·ªõi ƒë·ªëi t∆∞·ª£ng n√†o
                - S·ª≠ d·ª•ng emoji ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán
                - K·∫øt th√∫c b·∫±ng l·ªùi khuy√™n chung
                """, userInput, formatProductsForAdvice(products));

            Prompt prompt = new Prompt(advicePrompt);
            return chatClient.call(prompt).getResult().getOutput().getContent().trim();
        } catch (Exception e) {
            System.err.println("Error in generateBestSellingAdvice: " + e.getMessage());
            return String.format("üî• **TOP %d S·∫¢N PH·∫®M B√ÅN CH·∫†Y NH·∫§T** üî•\n\n" +
                    "D·ª±a tr√™n d·ªØ li·ªáu b√°n h√†ng 3 th√°ng g·∫ßn nh·∫•t, ƒë√¢y l√† nh·ªØng s·∫£n ph·∫©m LEGO ƒë∆∞·ª£c kh√°ch h√†ng y√™u th√≠ch nh·∫•t:\n\n" +
                    "%s\n\n" +
                    "üí° **L·ªùi khuy√™n:** Nh·ªØng s·∫£n ph·∫©m n√†y ƒë·ªÅu c√≥ ch·∫•t l∆∞·ª£ng cao, ph√π h·ª£p v·ªõi nhi·ªÅu ƒë·ªô tu·ªïi v√† ƒë∆∞·ª£c ƒë√°nh gi√° t·ªët t·ª´ kh√°ch h√†ng. " +
                    "B·∫°n c√≥ th·ªÉ ch·ªçn theo s·ªü th√≠ch ho·∫∑c li√™n h·ªá t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n!",
                    products.size(), formatProductsForAdvice(products));
        }
    }

    private String formatUserNeeds(UserNeeds needs) {
        return String.format("ƒê·ªô tu·ªïi: %s, S·ªü th√≠ch: %s, Kinh nghi·ªám: %s, Danh m·ª•c: %s",
                needs.getAgeGroup() != null ? needs.getAgeGroup() : "N/A",
                needs.getInterests() != null ? needs.getInterests() : "N/A",
                needs.getExperience() != null ? needs.getExperience() : "N/A",
                needs.getCategory() != null ? needs.getCategory() : "N/A");
    }

    private FollowUpAnalysis analyzeFollowUpQuestion(String userInput, List<ChatMemory> chatHistory) {
        String contextInfo = buildContextFromHistory(chatHistory);
        
        String analysisPrompt = String.format("""
            Ph√¢n t√≠ch c√¢u h·ªèi follow-up v√† x√°c ƒë·ªãnh c·∫ßn t√¨m ki·∫øm s·∫£n ph·∫©m kh√¥ng.
            
            **NG·ªÆ C·∫¢NH:** %s
            **C√ÇU H·ªéI:** "%s"
            
            Tr·∫£ v·ªÅ JSON:
            {
              "analysis": "ph√¢n t√≠ch ng·∫Øn g·ªçn v·ªÅ c√¢u h·ªèi",
              "needProducts": true/false,
              "searchCriteria": "ti√™u ch√≠ t√¨m ki·∫øm n·∫øu c·∫ßn"
            }
            """, contextInfo, userInput);

        try {
            Prompt prompt = new Prompt(analysisPrompt);
            String jsonResponse = chatClient.call(prompt).getResult().getOutput().getContent();
            String cleanJson = cleanJsonResponse(jsonResponse);
            JsonNode node = objectMapper.readTree(cleanJson);
            
            String analysis = node.get("analysis").asText();
            boolean needProducts = node.get("needProducts").asBoolean();
            
            List<SanPham> products = new ArrayList<>();
            if (needProducts && node.has("searchCriteria")) {
                String criteria = node.get("searchCriteria").asText();
                products = searchProductsWithContext(criteria, chatHistory);
            }
            
            return new FollowUpAnalysis(analysis, products);
            
        } catch (Exception e) {
            return new FollowUpAnalysis("C√¢u h·ªèi follow-up v·ªÅ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc", new ArrayList<>());
        }
    }

    private List<SanPham> findAlternativeProducts(SearchRequestDTO originalCriteria) {
        try {
            // T·∫°o ti√™u ch√≠ r·ªông h∆°n
            SearchRequestDTO relaxedCriteria = new SearchRequestDTO();

            if (originalCriteria.getDoTuoi() != null) {
                relaxedCriteria.setDoTuoi(originalCriteria.getDoTuoi());
            }
            if (originalCriteria.getGia() != null) {
                relaxedCriteria.setGia(originalCriteria.getGia());
            }

            List<SanPham> products = sanPhamRepo.timKiemTheoDieuKien(relaxedCriteria);

            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusMonths(1);
            // N·∫øu v·∫´n tr·ªëng, l·∫•y s·∫£n ph·∫©m b√°n ch·∫°y
            if (products.isEmpty()) {
                List<Object[]> results = sanPhamRepo.findTopDaBan(startDate, endDate);
                List<String> tenSP = results.stream()
                        .map(r -> (String) r[1])
                        .toList();
                products = tenSP.stream()
                        .map(sanPhamRepo::findByTenSanPham)
                        .toList();
            }

            return products.stream().limit(8).collect(Collectors.toList());

        } catch (Exception e) {
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusMonths(1);
            List<Object[]> results = sanPhamRepo.findTopDaBan(startDate, endDate);
            List<String> tenSP = results.stream()
                    .map(r -> (String) r[1])
                    .toList();
            return tenSP.stream()
                    .map(sanPhamRepo::findByTenSanPham)
                    .toList();
        }
    }

    private String determineFAQResponse(String lowerInput) {
        if (lowerInput.contains("b·∫£o h√†nh")) {
            return faqDatabase.get("WARRANTY");
        } else if (lowerInput.contains("thanh to√°n")) {
            return faqDatabase.get("PAYMENT");
        } else if (lowerInput.contains("ƒë·ªïi") || lowerInput.contains("tr·∫£")) {
            return faqDatabase.get("RETURN");
        } else if (lowerInput.contains("li√™n h·ªá")) {
            return faqDatabase.get("CONTACT");
        } else {
            return "üìã **C√¢u h·ªèi th∆∞·ªùng g·∫∑p:**\n\n" +
                    "üöö " + faqDatabase.get("SHIPPING") + "\n\n" +
                    "üõ°Ô∏è " + faqDatabase.get("WARRANTY") + "\n\n" +
                    "üí≥ " + faqDatabase.get("PAYMENT") + "\n\n" +
                    "üîÑ " + faqDatabase.get("RETURN") + "\n\n" +
                    "üìû " + faqDatabase.get("CONTACT");
        }
    }

    private String formatProductsForAdvice(List<SanPham> products) {
        return products.stream()
                .limit(5)
                .map(p -> String.format("- %s | Gi√°: %s | ƒê·ªô tu·ªïi: %s",
                        p.getTenSanPham() != null ? p.getTenSanPham() : "N/A",
                        p.getGia() != null ? String.format("%,.0f ƒë", p.getGia()) : "N/A",
                        p.getDoTuoi() != null ? p.getDoTuoi() : "N/A"))
                .collect(Collectors.joining("\n"));
    }

    /**
     * Utility Methods
     */
    private String cleanJsonResponse(String jsonResponse) {
        String cleaned = jsonResponse.trim();
        if (cleaned.startsWith("```json")) {
            cleaned = cleaned.substring(7);
        }
        if (cleaned.startsWith("```")) {
            cleaned = cleaned.substring(3);
        }
        if (cleaned.endsWith("```")) {
            cleaned = cleaned.substring(0, cleaned.length() - 3);
        }
        return cleaned.trim();
    }

    private String preprocessJsonNumbers(String json) {
        try {
            JsonNode node = objectMapper.readTree(json);
            if (node.has("soLuongManhGhepMin") && node.get("soLuongManhGhepMin").isTextual()) {
                String value = node.get("soLuongManhGhepMin").asText();
                Integer numericValue = extractNumericValue(value);
                return json.replaceFirst(
                        "\"soLuongManhGhepMin\"\\s*:\\s*\"[^\"]*\"",
                        "\"soLuongManhGhepMin\": " + (numericValue != null ? numericValue : "null")
                );
            }
            return json;
        } catch (Exception e) {
            return json;
        }
    }

    private Integer extractNumericValue(String value) {
        if (value == null || value.trim().isEmpty()) {
            return null;
        }
        String numStr = value.replaceAll("[^0-9]", "");
        if (!numStr.isEmpty()) {
            try {
                return Integer.parseInt(numStr);
            } catch (NumberFormatException e) {
                return null;
            }
        }
        return null;
    }
    public SanPhamResponseDTO convertToResponseDTO(SanPham sanPham) {
        List<AnhSp> listAnh = anhSpRepo.findBySanPhamId(sanPham.getId());
        List<AnhResponse> anhUrls = listAnh.stream()
                .map(anh -> {
                    AnhResponse response = new AnhResponse();
                    response.setId(anh.getId());
                    response.setUrl(anh.getUrl());
                    response.setAnhChinh(anh.getAnhChinh());
                    return response;
                })
                .toList();

        SanPhamResponseDTO dto = new SanPhamResponseDTO();
        dto.setId(sanPham.getId());
        dto.setTenSanPham(sanPham.getTenSanPham());
        dto.setMaSanPham(sanPham.getMaSanPham());
        dto.setDoTuoi(sanPham.getDoTuoi());
        dto.setMoTa(sanPham.getMoTa());
        dto.setGia(sanPham.getGia());
        dto.setSoLuongManhGhep(sanPham.getSoLuongManhGhep());
        dto.setSoLuongTon(sanPham.getSoLuongTon());
        dto.setSoLuongVote(sanPham.getSoLuongVote());
        dto.setDanhGiaTrungBinh(sanPham.getDanhGiaTrungBinh());
        dto.setDanhMucId(sanPham.getDanhMuc() != null ? sanPham.getDanhMuc().getId() : null);
        dto.setBoSuuTapId(sanPham.getBoSuuTap() != null ? sanPham.getBoSuuTap().getId() : null);
        dto.setXuatXuId(sanPham.getXuatXu() != null ? sanPham.getXuatXu().getId() : null);
        dto.setTrangThai(sanPham.getTrangThai());
        dto.setThuongHieuId(sanPham.getThuongHieu() != null ? sanPham.getThuongHieu().getId() : null);
        dto.setNoiBat(sanPham.getNoiBat() != null ? sanPham.getNoiBat() : null);
        dto.setAnhUrls(anhUrls);
        return dto;
    }
}

